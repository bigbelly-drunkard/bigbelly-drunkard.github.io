{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/freemind.bithack/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/card.jpg","path":"card.jpg","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/bootstrap-responsive.css","path":"css/bootstrap-responsive.css","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/bootstrap.css.map","path":"css/bootstrap.css.map","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/font-awesome.css","path":"css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/google-fonts.css","path":"css/google-fonts.css","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/highlight.css","path":"css/highlight.css","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/prism.css","path":"css/prism.css","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/responsive.css","path":"css/responsive.css","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fonts/FiraCode.ttf","path":"fonts/FiraCode.ttf","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/js/md5.min.js","path":"js/md5.min.js","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/about.css","path":"css/about.css","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/fonts/FiraCode.ttf","path":"css/fonts/FiraCode.ttf","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/fonts/Fixedsys500c.otf","path":"css/fonts/Fixedsys500c.otf","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/fonts/Fixedsys500c.eot","path":"css/fonts/Fixedsys500c.eot","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/fonts/Fixedsys500c.svg","path":"css/fonts/Fixedsys500c.svg","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/fonts/Fixedsys500c.ttf","path":"css/fonts/Fixedsys500c.ttf","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/css/fonts/Fixedsys500c.woff","path":"css/fonts/Fixedsys500c.woff","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","path":"fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","path":"fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","path":"fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","path":"fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","path":"fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","path":"fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","path":"fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","modified":1,"renderable":1},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","path":"fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","modified":1,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"dcf1e4f54d664648db46de0e9672b1a791b0729f","modified":1709035070788},{"_id":"source/.DS_Store","hash":"b28681aacf60311d20e4630a542454f9fcfdb5ef","modified":1708691758780},{"_id":"source/_posts/csrf.md","hash":"ae2858b5f2b9e967bb88da74861b3f7f026944c9","modified":1708770098960},{"_id":"source/tags/index.md","hash":"243b0a73d657aebc31e356f27fd47c4a3b01025e","modified":1709034984223},{"_id":"source/_posts/httponly原理.md","hash":"2c54ec1eb910326cdc0ba1147252c74af7358394","modified":1708769397416},{"_id":"source/about/index.md","hash":"5e6225224646884c17101435fd5f7333c2fcb69b","modified":1709034995092},{"_id":"source/_posts/.DS_Store","hash":"e2e91aa53f0e97f3d9ed7215d1e7a8065753dac1","modified":1708691706653},{"_id":"source/_posts/使用hexo搭建个人博客.md","hash":"3c722428630172c75d1bb508ef391e92756f4e21","modified":1708770409410},{"_id":"source/_posts/以太坊学习.md","hash":"d7c7c24cdccf542f1a28afc91b0e9f554fdb2132","modified":1708770440725},{"_id":"source/_posts/jwttoken.md","hash":"5871b242c44cc598b0078348fc6ab5051a7b9458","modified":1708770509627},{"_id":"source/_posts/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1708691711661},{"_id":"source/_posts/跨域.md","hash":"c823da9a294a551bda55bd97853558a2f5afcd26","modified":1708767703229},{"_id":"source/_posts/redis笔试题.md","hash":"9b2aa21d661af9aca299355fe58e1a621a1be3e5","modified":1708767753744},{"_id":"source/_posts/使用hexo搭建个人博客/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1708691688248},{"_id":"source/_posts/images/截屏2024-02-23 17.55.12.png","hash":"30c04da583f4ee1eaeb0fe1ce864e48fb3812dcb","modified":1708682127781},{"_id":"source/_posts/images/截屏2024-02-23 17.56.11.png","hash":"57d521bf9b346bba3fc32bc9ba289bac7ab96089","modified":1708682188159},{"_id":"source/_posts/使用hexo搭建个人博客/picture1.png","hash":"457fd544270f4952db1244663c35c88b917143f6","modified":1708682101881},{"_id":"source/_posts/images/截屏2024-02-23 19.41.41.png","hash":"877747addd715eec4cc72291e3c9e20cdbdc2992","modified":1708688518503},{"_id":"source/_posts/使用hexo搭建个人博客/picture2.png","hash":"d1dba1cbe53faf16ad17399fe6859407ca3ffd09","modified":1708682660894},{"_id":"themes/freemind.bithack/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1708692910139},{"_id":"themes/freemind.bithack/LICENSE","hash":"f26ce5333bd73ee6f0f9bb2c97fcf5707c1c7715","modified":1708692910110},{"_id":"themes/freemind.bithack/README.md","hash":"3a909f6b12a1d6f4dbca74cae212d2195ae6edfa","modified":1708692910139},{"_id":"themes/freemind.bithack/languages/pt-BR.yml","hash":"e58d02636dc47f698cc6c2045edffc1a08772639","modified":1708692910138},{"_id":"themes/freemind.bithack/languages/zh-CN.yml","hash":"37b0b97471e646caf67404b447474b6da9fae564","modified":1708692910138},{"_id":"themes/freemind.bithack/layout/categories.ejs","hash":"75931cf16ce89871f53d09e918109bcb0c7741a1","modified":1708692910113},{"_id":"themes/freemind.bithack/layout/archive.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1708692910112},{"_id":"themes/freemind.bithack/languages/default.yml","hash":"175fa1bd6f3744f81326b8e7c9a3dfad07199270","modified":1708692910138},{"_id":"themes/freemind.bithack/layout/layout.ejs","hash":"cd333c7859008552037659012011990a9b32d2c4","modified":1708692910112},{"_id":"themes/freemind.bithack/layout/index.ejs","hash":"8f6e482aad2d33fbc9407eb6a47a526940946c3d","modified":1708692910112},{"_id":"themes/freemind.bithack/layout/tags.ejs","hash":"4a39d2fe5cd2b005b9a18b30a11566d631a977fe","modified":1708692910112},{"_id":"themes/freemind.bithack/layout/page.ejs","hash":"21612a42b29cb20f106bc2716c598e69db142750","modified":1708692910119},{"_id":"themes/freemind.bithack/_config.yml","hash":"6a336505d79b20350c2c5d881f2cb0f0612464e3","modified":1709036545049},{"_id":"themes/freemind.bithack/layout/post.ejs","hash":"8535eadbfcb7e52325f16da412ecc04cd1426203","modified":1708692910111},{"_id":"themes/freemind.bithack/languages/zh-TW.yml","hash":"633a09b238cfadcf3c6f3dbec58cf60822d23a44","modified":1708692910138},{"_id":"themes/freemind.bithack/source/favicon.png","hash":"61c2eabaf46078d39a745a6c0f69e8fe33aa8775","modified":1708692910132},{"_id":"themes/freemind.bithack/layout/_partial/after_footer.ejs","hash":"59b4ade0400f04b19bc73a1ae7e66ea5cdef48fc","modified":1708692910118},{"_id":"themes/freemind.bithack/layout/_partial/footer.ejs","hash":"8e6f5cd6bf962357793748a724a6140b62d497b0","modified":1708692910117},{"_id":"themes/freemind.bithack/layout/_partial/head.ejs","hash":"0866714a3ca6bb5369d681532c6b1e7d725f22a8","modified":1708692910117},{"_id":"themes/freemind.bithack/layout/_partial/index.ejs","hash":"0bd770f5281919857f9bd913f61851e5555201d3","modified":1708692910117},{"_id":"themes/freemind.bithack/layout/_partial/navigation.ejs","hash":"e4d9af8d4cae60541a8e8f0f8caeeb28aaf5ca33","modified":1708692910118},{"_id":"themes/freemind.bithack/layout/_partial/search.ejs","hash":"f00bcd7cdef50a727600960de1d8b6a9e9b360b4","modified":1708692910117},{"_id":"themes/freemind.bithack/layout/_partial/index_pagination.ejs","hash":"64741f67cbcd03a3a203fa9c080e7239710eddd9","modified":1708692910118},{"_id":"themes/freemind.bithack/layout/_partial/archive.ejs","hash":"6eeb24ae52e46343ba6e9fd7cfa56ee79589f421","modified":1708692910117},{"_id":"themes/freemind.bithack/layout/_partial/sidebar.ejs","hash":"0574610968679984f6aec4b31fbba655df972d28","modified":1708692910118},{"_id":"themes/freemind.bithack/layout/_widget/category.ejs","hash":"7452e116d550f8a5c5beff8cac3ac56645f035ae","modified":1708692910119},{"_id":"themes/freemind.bithack/layout/_widget/recent_posts.ejs","hash":"a9333350df895e2bc85c60c17c47a6a1dfa846e7","modified":1708692910120},{"_id":"themes/freemind.bithack/layout/_widget/search.ejs","hash":"cc322c98ca8420d1b5a31a7337249b403c661b80","modified":1708692910120},{"_id":"themes/freemind.bithack/layout/_partial/article.ejs","hash":"2eb0e76ab38bb77f9cc6a469f3812882841d1629","modified":1709036596535},{"_id":"themes/freemind.bithack/layout/_widget/tagcloud.ejs","hash":"4d592eb23466383f3224e36474b2e4dfe85e4d42","modified":1708692910119},{"_id":"themes/freemind.bithack/source/fancybox/fancybox_loading@2x.gif","hash":"381e91e67e85bfda09ce8b88205d93d9a7d20d4d","modified":1708692910124},{"_id":"themes/freemind.bithack/source/fancybox/fancybox_loading.gif","hash":"4fbaf63664f65a42bef60289c887cd61a925ce4c","modified":1708692910125},{"_id":"themes/freemind.bithack/layout/_widget/links.ejs","hash":"209f60bec33c1179dff9bd09c66dc2c036246b40","modified":1708692910120},{"_id":"themes/freemind.bithack/source/fancybox/blank.gif","hash":"4ffebfc1255c0da73aab342450a9ee09fcaccb86","modified":1708692910124},{"_id":"themes/freemind.bithack/source/fancybox/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1708692910122},{"_id":"themes/freemind.bithack/source/fancybox/fancybox_overlay.png","hash":"beb714da455e5dbdbf7b2ed466ff4308c103addb","modified":1708692910123},{"_id":"themes/freemind.bithack/source/css/bootstrap-responsive.css","hash":"b668e794bc3f24fd718d24304605000c5a8be0f9","modified":1708692910125},{"_id":"themes/freemind.bithack/source/css/font-awesome.css","hash":"5eca1a5aef2ef4fb845f7e5a96c27f74a5bd1763","modified":1708692910127},{"_id":"themes/freemind.bithack/source/fancybox/fancybox_sprite@2x.png","hash":"ecf1523aefe416a4cc901ab4cda5d488e3d9cd76","modified":1708692910123},{"_id":"themes/freemind.bithack/layout/_partial/toc.ejs","hash":"cbf545a77a2b738e7311943962931743eb80abf4","modified":1709036639668},{"_id":"themes/freemind.bithack/source/fancybox/fancybox_sprite.png","hash":"0657b6b574bafc4c819c7d6c3bc5dd7205c8eee7","modified":1708692910122},{"_id":"themes/freemind.bithack/source/css/google-fonts.css","hash":"06db66e315b47f844fb208b50e5710606360b142","modified":1708692910126},{"_id":"themes/freemind.bithack/source/css/highlight.css","hash":"cd30b0c288cd09890125723fe2356f58c1503080","modified":1708692910126},{"_id":"themes/freemind.bithack/source/css/prism.css","hash":"4c53536a9051b13afc4c1f1082923c6b48ea3db1","modified":1708692910127},{"_id":"themes/freemind.bithack/source/fancybox/jquery.fancybox.css","hash":"cbb69ef9748bf92edc3eb4b269b77ad25465d049","modified":1708692910123},{"_id":"themes/freemind.bithack/source/css/style.css","hash":"84708c3e9a48f1fd022e375840eb73df1a7a288d","modified":1708692910127},{"_id":"themes/freemind.bithack/source/css/responsive.css","hash":"30f6a26aa0a5368d24a68575eb3fe254de7b92d2","modified":1708692910127},{"_id":"themes/freemind.bithack/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1708692910136},{"_id":"themes/freemind.bithack/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1708692910136},{"_id":"themes/freemind.bithack/source/js/bootstrap.min.js","hash":"9933cdc70c0047a3ea1a196f9320c36737b93c2a","modified":1708692910131},{"_id":"themes/freemind.bithack/source/js/gallery.js","hash":"10cad81731825178f3d30b80a2694a377c1fb7a6","modified":1708692910130},{"_id":"themes/freemind.bithack/source/js/main.js","hash":"e3fcd795564533a3984b0ce327bd8dff44145f89","modified":1708692910131},{"_id":"themes/freemind.bithack/source/js/md5.min.js","hash":"9fe6cc786714b853c0c4ade488c09288082dbcc4","modified":1708692910131},{"_id":"themes/freemind.bithack/source/js/jquery.imagesloaded.min.js","hash":"3eb6381d2ed4b706020e4be5aff024aab4bcabc5","modified":1708692910130},{"_id":"themes/freemind.bithack/layout/_partial/post/category.ejs","hash":"cc5b4cc95af6d5df4f7d1f1301dad8d4a5c7f8d0","modified":1708692910114},{"_id":"themes/freemind.bithack/layout/_partial/post/analytics.ejs","hash":"2e10343136aa0ad78908751f8276490589154ddc","modified":1708692910116},{"_id":"themes/freemind.bithack/layout/_partial/post/comment.ejs","hash":"94c2df9d0017e325b5ad052f76355a218328fc62","modified":1708692910116},{"_id":"themes/freemind.bithack/layout/_partial/post/comment_footer.ejs","hash":"b3a6db566afdf0931909013926b7008eac9129ee","modified":1708692910116},{"_id":"themes/freemind.bithack/layout/_partial/post/copyright.ejs","hash":"e3689a9248cecfc0fc585a90f1bda411e65de14d","modified":1708692910115},{"_id":"themes/freemind.bithack/layout/_partial/post/entry.ejs","hash":"c7a40f6fa8297daeb7f4c7ec35985c412094bc7b","modified":1708692910116},{"_id":"themes/freemind.bithack/layout/_partial/post/gitalk.ejs","hash":"1c92e2e9a1b8d1a8ea972e322f0b9a11fa6e49b6","modified":1708692910113},{"_id":"themes/freemind.bithack/source/js/search.js","hash":"a882244488031de498176fc6af35cea2a13c7a18","modified":1708692910131},{"_id":"themes/freemind.bithack/layout/_partial/post/pagination.ejs","hash":"ea48347c56412921da646bfe5c293bfd275c8a9d","modified":1708692910114},{"_id":"themes/freemind.bithack/layout/_partial/post/meta.ejs","hash":"432e08b2563241dec4e4ef67717173d22e052dcf","modified":1708692910115},{"_id":"themes/freemind.bithack/layout/_partial/post/share.ejs","hash":"991cf130c37f08c7e948772fb45587592b165b55","modified":1708692910116},{"_id":"themes/freemind.bithack/layout/_partial/post/tag.ejs","hash":"ae292045468812e678780288e51b1b19fa7e3e0c","modified":1708692910115},{"_id":"themes/freemind.bithack/layout/_partial/post/title.ejs","hash":"ce8eb57990e7dac5e472832235ec719863b35201","modified":1708692910114},{"_id":"themes/freemind.bithack/layout/_partial/post/valine.ejs","hash":"72c9ff6de05b496a1f3aba16f57caa154e8f43c1","modified":1708692910114},{"_id":"themes/freemind.bithack/layout/_partial/post/waline.ejs","hash":"22eac0f2b373047af104f6a1029f1f47438a9e8e","modified":1708692910115},{"_id":"themes/freemind.bithack/source/css/fonts/Fixedsys500c.otf","hash":"e1fede43e072a990b9cd9899cdd26b78b30d305d","modified":1708692910128},{"_id":"themes/freemind.bithack/source/css/fonts/Fixedsys500c.eot","hash":"49611cf2e4d7e5c489c191f994ba7ac315bcce5c","modified":1708692910129},{"_id":"themes/freemind.bithack/layout/_partial/post/slogan.ejs","hash":"ab0e8ce73ee3e98c5507b6a4ffe4385e2ba81d9e","modified":1708692910115},{"_id":"themes/freemind.bithack/source/css/fonts/Fixedsys500c.ttf","hash":"19a8e49df8611dd0d90133a2eb0e410c23932db4","modified":1708692910128},{"_id":"themes/freemind.bithack/source/css/fonts/Fixedsys500c.woff","hash":"21f8e34c5e252a54710c5f6b0e363b9c43f979b2","modified":1708692910128},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","hash":"1d9bb14c006d39d7eb0812a85567c7431f899b8d","modified":1708692910135},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","hash":"f401d51152681048c06187c5d3919b1407b899c5","modified":1708692910134},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","hash":"87deb174af2e2beebb9f09d618a5159ca299a3d0","modified":1708692910135},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","hash":"d9f913d09bb3c25749daf8e7ab829c850a842929","modified":1708692910134},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","hash":"33225e85c33279e7b4f0c5c65ff93bec740dd59c","modified":1708692910133},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","hash":"e6c9f1e5a6a966a8f7250201356f351890a48921","modified":1708692910133},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","hash":"17a484b92c0dacc8e8b4f0d38ccc1db400819d1d","modified":1708692910134},{"_id":"themes/freemind.bithack/source/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","hash":"18dc51e642b4df958098d3bbc6d3ba0237ef6150","modified":1708692910133},{"_id":"themes/freemind.bithack/source/css/about.css","hash":"af1d65d0ebbe7bcd71d8c39dcc07fde080ab6d26","modified":1709033087176},{"_id":"source/_posts/images/截屏2023-12-31 11.35.02.png","hash":"1e777d5775e763dc193e3128da7fe3f7b23d51c4","modified":1703993714439},{"_id":"source/_posts/images/截屏2023-12-31 11.36.59.png","hash":"1e777d5775e763dc193e3128da7fe3f7b23d51c4","modified":1703993823005},{"_id":"themes/freemind.bithack/source/css/bootstrap.min.css","hash":"c3aa181b9719f016142bf49ec5f57d0bf91a2d5f","modified":1708692910125},{"_id":"themes/freemind.bithack/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1708692910136},{"_id":"themes/freemind.bithack/source/js/jquery-2.0.3.min.js","hash":"3dad20239301f9ee22f22ca7d5ac6eca1da4ac22","modified":1708692910130},{"_id":"themes/freemind.bithack/source/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1708692910132},{"_id":"themes/freemind.bithack/source/css/fonts/Fixedsys500c.svg","hash":"584b95873e60ea5d4212dc42cb37f4643d3a1915","modified":1708692910128},{"_id":"themes/freemind.bithack/source/card.jpg","hash":"2abd9da358e1719c11494eba96ec138e80370309","modified":1709032329525},{"_id":"source/_posts/images/截屏2024-02-23 17.59.31.png","hash":"19718bb4b39b140ebd278098e454d97b007fb2d8","modified":1708682382122},{"_id":"source/_posts/images/截屏2024-02-23 18.00.06.png","hash":"68aab09d9b5a17f0cc0a959813bd727f01a58a07","modified":1708682429594},{"_id":"themes/freemind.bithack/source/css/bootstrap.css.map","hash":"916c87ec5b34b3789db112dff0c88a874184ae8f","modified":1708692910126},{"_id":"themes/freemind.bithack/source/fonts/FiraCode.ttf","hash":"25562828ef61c2981b59ab0ed20ffafa37a74441","modified":1708692910136},{"_id":"themes/freemind.bithack/source/css/fonts/FiraCode.ttf","hash":"25562828ef61c2981b59ab0ed20ffafa37a74441","modified":1708692910129},{"_id":"themes/freemind.bithack/source/fonts/fontawesome-webfont.svg","hash":"e471023286b7dd1d2ccc72f670a471cfdfeafab7","modified":1708692910132},{"_id":"source/_posts/images/截屏2024-02-20 05.57.52.png","hash":"11cc1e2d1ddf2a62a450227223de83493e5ab4a3","modified":1708379877957},{"_id":"source/_posts/images/截屏2024-02-23 17.54.34.png","hash":"ae794e14904ff5d4807c7d9122d43478211fcca7","modified":1708682079887},{"_id":"source/_posts/images/截屏2024-02-23 17.54.34 (2).png","hash":"873971bf5d9dc092b63dbc4def15eee1e6d482eb","modified":1708682079896},{"_id":"public/search.xml","hash":"5a9287cef5f483d30fa7dc3051090d13defdfa91","modified":1709547106756},{"_id":"public/categories/index.html","hash":"ac9b365dff07839fba244465a76bc6e2d5668b64","modified":1709547106756},{"_id":"public/2024/02/24/httponly原理/index.html","hash":"a19946b9f51c8cd4d7ca085d54d2739cc4788b47","modified":1709547106756},{"_id":"public/2024/02/23/以太坊学习/index.html","hash":"1f99327396773e4c62f0bcfdfbf5e39eb023f602","modified":1709547106756},{"_id":"public/about/index.html","hash":"546886a7d1518e9762ec336b96ba236f8d3a95a3","modified":1709547106756},{"_id":"public/tags/index.html","hash":"d9a091e4e029a0d03958e8b202deec8b73136709","modified":1709547106756},{"_id":"public/2024/02/23/跨域/index.html","hash":"c98beb27724c56e00ee4f87e88a8005493e5992a","modified":1709547106756},{"_id":"public/2024/02/23/使用hexo搭建个人博客/index.html","hash":"ac0ce72531c9b91a4348bb5b8534b50c7326ede2","modified":1709547106756},{"_id":"public/2024/02/23/jwttoken/index.html","hash":"cab3c53c00e486004eb94618d2b306d5547ba96c","modified":1709547106756},{"_id":"public/2024/02/23/redis笔试题/index.html","hash":"cd99fd46e657a51f63d9f1a8efc499b5d82ece73","modified":1709547106756},{"_id":"public/index.html","hash":"c017c45da98d4761b4289ad0e38a62bfdc8f22d9","modified":1709547106756},{"_id":"public/categories/网络安全/index.html","hash":"f4119f52e2c332fda315f89e2989a627021fa067","modified":1709547106756},{"_id":"public/2024/02/23/csrf/index.html","hash":"20a840182bcd8cb26747dbc20cd070f8f10399b9","modified":1709547106756},{"_id":"public/categories/区块链/index.html","hash":"1ae1209347eee16255b321ca753d0bb18b982262","modified":1709547106756},{"_id":"public/categories/数据库/index.html","hash":"cce97dbfb96d3a378b4e57c645066de6a68e9198","modified":1709547106756},{"_id":"public/categories/hexo/index.html","hash":"54b4f10a60b0f8813915c83e601ab26c6a52176c","modified":1709547106756},{"_id":"public/archives/2024/02/index.html","hash":"80b2d43f7bc45311112404fd68bec30b4a01f0df","modified":1709547106756},{"_id":"public/archives/2024/index.html","hash":"6c6d6d18f49dfc827e63df78d05f2f9f39f8f8bb","modified":1709547106756},{"_id":"public/archives/index.html","hash":"18bf6c050b6fdd2f853cc5df86fa23bdb02e0bb5","modified":1709547106756},{"_id":"public/tags/csrf/index.html","hash":"01170605d00aba8260b9b0675e1fc5b3a40f0a5d","modified":1709547106756},{"_id":"public/tags/身份验证/index.html","hash":"aa1d26b7041a3f99105f3818b89d770ad80636ce","modified":1709547106756},{"_id":"public/tags/httponly/index.html","hash":"531120cba2ae59cf460ec1cf619e2f499c275583","modified":1709547106756},{"_id":"public/tags/xss/index.html","hash":"db215af86d2a44f6bb435f84b48075fd3622722c","modified":1709547106756},{"_id":"public/tags/以太坊/index.html","hash":"3e33dc49c152bcb9c83f00597c223338df754eb5","modified":1709547106756},{"_id":"public/tags/跨域/index.html","hash":"712e28b34ee68bb6ab98a0ff8090c24014308b99","modified":1709547106756},{"_id":"public/tags/redis/index.html","hash":"393febd1d94e3e34c3fa08df0e2eefe13a135f4e","modified":1709547106756},{"_id":"public/tags/hexo/index.html","hash":"18f4150a6a1ae0b83a58e0098185dd7a40cecaf8","modified":1709547106756},{"_id":"public/tags/个人博客/index.html","hash":"417d8710c8f3cf6a266fb63cf849c29872e58fbb","modified":1709547106756},{"_id":"public/fancybox/fancybox_loading.gif","hash":"4fbaf63664f65a42bef60289c887cd61a925ce4c","modified":1709547106756},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"381e91e67e85bfda09ce8b88205d93d9a7d20d4d","modified":1709547106756},{"_id":"public/fancybox/blank.gif","hash":"4ffebfc1255c0da73aab342450a9ee09fcaccb86","modified":1709547106756},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"ecf1523aefe416a4cc901ab4cda5d488e3d9cd76","modified":1709547106756},{"_id":"public/fancybox/fancybox_sprite.png","hash":"0657b6b574bafc4c819c7d6c3bc5dd7205c8eee7","modified":1709547106756},{"_id":"public/favicon.png","hash":"61c2eabaf46078d39a745a6c0f69e8fe33aa8775","modified":1709547106756},{"_id":"public/fancybox/fancybox_overlay.png","hash":"beb714da455e5dbdbf7b2ed466ff4308c103addb","modified":1709547106756},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1709547106756},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1709547106756},{"_id":"public/css/fonts/Fixedsys500c.otf","hash":"e1fede43e072a990b9cd9899cdd26b78b30d305d","modified":1709547106756},{"_id":"public/css/fonts/Fixedsys500c.eot","hash":"49611cf2e4d7e5c489c191f994ba7ac315bcce5c","modified":1709547106756},{"_id":"public/css/fonts/Fixedsys500c.woff","hash":"21f8e34c5e252a54710c5f6b0e363b9c43f979b2","modified":1709547106756},{"_id":"public/fonts/google-fonts/0XxGQsSc1g4rdRdjJKZrNBsxEYwM7FgeyaSgU71cLG0.woff","hash":"33225e85c33279e7b4f0c5c65ff93bec740dd59c","modified":1709547106756},{"_id":"public/fonts/google-fonts/2UX7WLTfW3W8TclTUvlFyQ.woff","hash":"87deb174af2e2beebb9f09d618a5159ca299a3d0","modified":1709547106756},{"_id":"public/fonts/google-fonts/LKf8nhXsWg5ybwEGXk8UBQ.woff","hash":"f401d51152681048c06187c5d3919b1407b899c5","modified":1709547106756},{"_id":"public/fonts/google-fonts/cj2hUnSRBhwmSPr9kS5899kZXW4sYc4BjuAIFc1SXII.woff","hash":"17a484b92c0dacc8e8b4f0d38ccc1db400819d1d","modified":1709547106756},{"_id":"public/fonts/google-fonts/0AKsP294HTD-nvJgucYTaIbN6UDyHWBl620a-IRfuBk.woff","hash":"1d9bb14c006d39d7eb0812a85567c7431f899b8d","modified":1709547106756},{"_id":"public/css/fonts/Fixedsys500c.ttf","hash":"19a8e49df8611dd0d90133a2eb0e410c23932db4","modified":1709547106756},{"_id":"public/fonts/google-fonts/UyYrYy3ltEffJV9QueSi4RdbPw3QSf9R-kE0EsQUn2A.woff","hash":"d9f913d09bb3c25749daf8e7ab829c850a842929","modified":1709547106756},{"_id":"public/2024/02/23/使用hexo搭建个人博客/picture1.png","hash":"457fd544270f4952db1244663c35c88b917143f6","modified":1709547106756},{"_id":"public/fonts/google-fonts/PIPMHY90P7jtyjpXuZ2cLD8E0i7KZn-EPnyo3HZu7kw.woff","hash":"18dc51e642b4df958098d3bbc6d3ba0237ef6150","modified":1709547106756},{"_id":"public/2024/02/23/使用hexo搭建个人博客/picture2.png","hash":"d1dba1cbe53faf16ad17399fe6859407ca3ffd09","modified":1709547106756},{"_id":"public/fonts/google-fonts/lILlYDvubYemzYzN7GbLkHhCUOGz7vYGh680lGh-uXM.woff","hash":"e6c9f1e5a6a966a8f7250201356f351890a48921","modified":1709547106756},{"_id":"public/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1709547106756},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1709547106756},{"_id":"public/css/fonts/Fixedsys500c.svg","hash":"584b95873e60ea5d4212dc42cb37f4643d3a1915","modified":1709547106756},{"_id":"public/css/bootstrap-responsive.css","hash":"ea29a73addac5004ba4e7e4860e895cf15a5aa31","modified":1709547106756},{"_id":"public/fancybox/jquery.fancybox.css","hash":"cbb69ef9748bf92edc3eb4b269b77ad25465d049","modified":1709547106756},{"_id":"public/css/google-fonts.css","hash":"06db66e315b47f844fb208b50e5710606360b142","modified":1709547106756},{"_id":"public/css/prism.css","hash":"4c53536a9051b13afc4c1f1082923c6b48ea3db1","modified":1709547106756},{"_id":"public/css/responsive.css","hash":"30f6a26aa0a5368d24a68575eb3fe254de7b92d2","modified":1709547106756},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1709547106756},{"_id":"public/css/style.css","hash":"25bb16906426075c57d422d9b934f6e15d993200","modified":1709547106756},{"_id":"public/js/gallery.js","hash":"10cad81731825178f3d30b80a2694a377c1fb7a6","modified":1709547106756},{"_id":"public/js/bootstrap.min.js","hash":"5814e91bb6276f4de8b7951c965f2f190a03978d","modified":1709547106756},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"3eb6381d2ed4b706020e4be5aff024aab4bcabc5","modified":1709547106756},{"_id":"public/css/font-awesome.css","hash":"180959029f82028c2100b7eeec7665412a49e588","modified":1709547106756},{"_id":"public/js/md5.min.js","hash":"9fe6cc786714b853c0c4ade488c09288082dbcc4","modified":1709547106756},{"_id":"public/css/highlight.css","hash":"1a80da34ab77a25bf81f45af1f05e6fdf78409d3","modified":1709547106756},{"_id":"public/js/search.js","hash":"a882244488031de498176fc6af35cea2a13c7a18","modified":1709547106756},{"_id":"public/css/about.css","hash":"af1d65d0ebbe7bcd71d8c39dcc07fde080ab6d26","modified":1709547106756},{"_id":"public/js/main.js","hash":"e3fcd795564533a3984b0ce327bd8dff44145f89","modified":1709547106756},{"_id":"public/css/bootstrap.min.css","hash":"f32494db3bd68ccca0368f68ad7a9156e97a4831","modified":1709547106756},{"_id":"public/js/jquery-2.0.3.min.js","hash":"28daf1b2a995cc4de81154a9a9ebdbb98f7c9997","modified":1709547106756},{"_id":"public/card.jpg","hash":"2abd9da358e1719c11494eba96ec138e80370309","modified":1709547106756},{"_id":"public/css/bootstrap.css.map","hash":"916c87ec5b34b3789db112dff0c88a874184ae8f","modified":1709547106756},{"_id":"public/fonts/FiraCode.ttf","hash":"25562828ef61c2981b59ab0ed20ffafa37a74441","modified":1709547106756},{"_id":"public/css/fonts/FiraCode.ttf","hash":"25562828ef61c2981b59ab0ed20ffafa37a74441","modified":1709547106756},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"e471023286b7dd1d2ccc72f670a471cfdfeafab7","modified":1709547106756}],"Category":[{"name":"网络安全","_id":"cltcs7hwf0003kjnn94y0h35q"},{"name":"区块链","_id":"cltcs7hwi000gkjnn1gwi0guw"},{"name":"数据库","_id":"cltcs7hwj000tkjnne71mbcpu"},{"name":"hexo","_id":"cltcs7hwj000vkjnn4inx5ar4"}],"Data":[],"Page":[{"title":"categories","date":"2024-02-27T11:57:50.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-02-27 19:57:50\n---\n","updated":"2024-02-27T11:57:50.788Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cltcs7hwb0000kjnn97691cex","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2024-02-27T11:56:35.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-02-27 19:56:35\n---\n","updated":"2024-02-27T11:56:35.092Z","path":"about/index.html","comments":1,"layout":"page","_id":"cltcs7hwe0002kjnn3o7p67m4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2024-02-27T11:56:24.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-02-27 19:56:24\n---\n","updated":"2024-02-27T11:56:24.223Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cltcs7hwf0005kjnn8zxt987x","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"什么是csrf？","mathjax":true,"_content":"\n### CSRF 攻击概述\n\nCSRF 攻击利用了用户已经认证的身份，在用户不知情的情况下，执行非预期的操作。例如，如果用户登录了银行网站，并且银行网站没有妥善防护 CSRF 攻击，攻击者可以诱导用户（通过点击一个链接或图片等）向银行网站发送恶意请求，如转账请求。\n\n### RESTful API 和 CSRF\n\nRESTful API 通常使用无状态认证机制，如 JWT（JSON Web Tokens）或 OAuth，而不是依赖于传统的基于会话的认证机制（这些机制依赖于浏览器的 Cookie）。这种无状态的认证方式意味着每个请求都必须包含所有必要的认证信息，而不是依赖于浏览器自动发送的 Cookie。\n\n1. **无状态认证**：使用 JWT 或 OAuth 之类的令牌进行认证的 RESTful API，对 CSRF 攻击具有天然的防御性，因为攻击者无法获取并在恶意请求中使用这些令牌。这与传统的基于 Cookie 的会话认证不同，后者可能自动随请求发送，从而容易受到 CSRF 攻击。\n2. **使用 HTTP 方法**：RESTful API 遵循使用不同 HTTP 方法（如 GET、POST、PUT、DELETE）的最佳实践，其中敏感操作（如更改或删除数据）应该使用 POST、PUT 或 DELETE 方法。由于 CSRF 攻击通常利用 GET 请求或某些情况下的 POST 请求，通过正确使用 HTTP 方法可以降低风险。\n\n### 不是完全免疫\n\n尽管上述因素可以减少 RESTful API 受到 CSRF 攻击的风险，但并不意味着它们完全免疫于 CSRF。例如，如果 RESTful API 错误地允许使用 GET 请求来执行有副作用的操作，那么它们仍然可能受到 CSRF 攻击的威胁。\n\n### 防御措施\n\n- **令牌基础认证**：确保所有敏感操作都需要一个令牌，该令牌不会自动由浏览器发送（如 JWT）。\n- **检查请求的来源**：通过检查请求头（如 `Origin` 和 `Referer`）来验证请求是否来自预期的来源。\n- **使用 CSRF 令牌**：对于需要基于 Cookie 的会话认证的场景，可以在请求中加入 CSRF 令牌，确保请求是经过用户明确意图发起的。\n\n总结，RESTful API 的某些特性和使用的认证机制可能减少了 CSRF 攻击的风险，但开发者仍需采取适当的安全措施来确保其服务的安全。\n\n\n\n","source":"_posts/csrf.md","raw":"---\ntitle: 什么是csrf？\nmathjax: true\ntags:\n    - csrf\ncategories:\n    - 网络安全\n---\n\n### CSRF 攻击概述\n\nCSRF 攻击利用了用户已经认证的身份，在用户不知情的情况下，执行非预期的操作。例如，如果用户登录了银行网站，并且银行网站没有妥善防护 CSRF 攻击，攻击者可以诱导用户（通过点击一个链接或图片等）向银行网站发送恶意请求，如转账请求。\n\n### RESTful API 和 CSRF\n\nRESTful API 通常使用无状态认证机制，如 JWT（JSON Web Tokens）或 OAuth，而不是依赖于传统的基于会话的认证机制（这些机制依赖于浏览器的 Cookie）。这种无状态的认证方式意味着每个请求都必须包含所有必要的认证信息，而不是依赖于浏览器自动发送的 Cookie。\n\n1. **无状态认证**：使用 JWT 或 OAuth 之类的令牌进行认证的 RESTful API，对 CSRF 攻击具有天然的防御性，因为攻击者无法获取并在恶意请求中使用这些令牌。这与传统的基于 Cookie 的会话认证不同，后者可能自动随请求发送，从而容易受到 CSRF 攻击。\n2. **使用 HTTP 方法**：RESTful API 遵循使用不同 HTTP 方法（如 GET、POST、PUT、DELETE）的最佳实践，其中敏感操作（如更改或删除数据）应该使用 POST、PUT 或 DELETE 方法。由于 CSRF 攻击通常利用 GET 请求或某些情况下的 POST 请求，通过正确使用 HTTP 方法可以降低风险。\n\n### 不是完全免疫\n\n尽管上述因素可以减少 RESTful API 受到 CSRF 攻击的风险，但并不意味着它们完全免疫于 CSRF。例如，如果 RESTful API 错误地允许使用 GET 请求来执行有副作用的操作，那么它们仍然可能受到 CSRF 攻击的威胁。\n\n### 防御措施\n\n- **令牌基础认证**：确保所有敏感操作都需要一个令牌，该令牌不会自动由浏览器发送（如 JWT）。\n- **检查请求的来源**：通过检查请求头（如 `Origin` 和 `Referer`）来验证请求是否来自预期的来源。\n- **使用 CSRF 令牌**：对于需要基于 Cookie 的会话认证的场景，可以在请求中加入 CSRF 令牌，确保请求是经过用户明确意图发起的。\n\n总结，RESTful API 的某些特性和使用的认证机制可能减少了 CSRF 攻击的风险，但开发者仍需采取适当的安全措施来确保其服务的安全。\n\n\n\n","slug":"csrf","published":1,"date":"2024-02-23T10:21:53.299Z","updated":"2024-02-24T10:21:38.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltcs7hwd0001kjnn0bir3tgb","content":"<h3 id=\"CSRF-攻击概述\"><a href=\"#CSRF-攻击概述\" class=\"headerlink\" title=\"CSRF 攻击概述\"></a>CSRF 攻击概述</h3><p>CSRF 攻击利用了用户已经认证的身份，在用户不知情的情况下，执行非预期的操作。例如，如果用户登录了银行网站，并且银行网站没有妥善防护 CSRF 攻击，攻击者可以诱导用户（通过点击一个链接或图片等）向银行网站发送恶意请求，如转账请求。</p>\n<h3 id=\"RESTful-API-和-CSRF\"><a href=\"#RESTful-API-和-CSRF\" class=\"headerlink\" title=\"RESTful API 和 CSRF\"></a>RESTful API 和 CSRF</h3><p>RESTful API 通常使用无状态认证机制，如 JWT（JSON Web Tokens）或 OAuth，而不是依赖于传统的基于会话的认证机制（这些机制依赖于浏览器的 Cookie）。这种无状态的认证方式意味着每个请求都必须包含所有必要的认证信息，而不是依赖于浏览器自动发送的 Cookie。</p>\n<ol>\n<li><strong>无状态认证</strong>：使用 JWT 或 OAuth 之类的令牌进行认证的 RESTful API，对 CSRF 攻击具有天然的防御性，因为攻击者无法获取并在恶意请求中使用这些令牌。这与传统的基于 Cookie 的会话认证不同，后者可能自动随请求发送，从而容易受到 CSRF 攻击。</li>\n<li><strong>使用 HTTP 方法</strong>：RESTful API 遵循使用不同 HTTP 方法（如 GET、POST、PUT、DELETE）的最佳实践，其中敏感操作（如更改或删除数据）应该使用 POST、PUT 或 DELETE 方法。由于 CSRF 攻击通常利用 GET 请求或某些情况下的 POST 请求，通过正确使用 HTTP 方法可以降低风险。</li>\n</ol>\n<h3 id=\"不是完全免疫\"><a href=\"#不是完全免疫\" class=\"headerlink\" title=\"不是完全免疫\"></a>不是完全免疫</h3><p>尽管上述因素可以减少 RESTful API 受到 CSRF 攻击的风险，但并不意味着它们完全免疫于 CSRF。例如，如果 RESTful API 错误地允许使用 GET 请求来执行有副作用的操作，那么它们仍然可能受到 CSRF 攻击的威胁。</p>\n<h3 id=\"防御措施\"><a href=\"#防御措施\" class=\"headerlink\" title=\"防御措施\"></a>防御措施</h3><ul>\n<li><strong>令牌基础认证</strong>：确保所有敏感操作都需要一个令牌，该令牌不会自动由浏览器发送（如 JWT）。</li>\n<li><strong>检查请求的来源</strong>：通过检查请求头（如 <code>Origin</code> 和 <code>Referer</code>）来验证请求是否来自预期的来源。</li>\n<li><strong>使用 CSRF 令牌</strong>：对于需要基于 Cookie 的会话认证的场景，可以在请求中加入 CSRF 令牌，确保请求是经过用户明确意图发起的。</li>\n</ul>\n<p>总结，RESTful API 的某些特性和使用的认证机制可能减少了 CSRF 攻击的风险，但开发者仍需采取适当的安全措施来确保其服务的安全。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"CSRF-攻击概述\"><a href=\"#CSRF-攻击概述\" class=\"headerlink\" title=\"CSRF 攻击概述\"></a>CSRF 攻击概述</h3><p>CSRF 攻击利用了用户已经认证的身份，在用户不知情的情况下，执行非预期的操作。例如，如果用户登录了银行网站，并且银行网站没有妥善防护 CSRF 攻击，攻击者可以诱导用户（通过点击一个链接或图片等）向银行网站发送恶意请求，如转账请求。</p>\n<h3 id=\"RESTful-API-和-CSRF\"><a href=\"#RESTful-API-和-CSRF\" class=\"headerlink\" title=\"RESTful API 和 CSRF\"></a>RESTful API 和 CSRF</h3><p>RESTful API 通常使用无状态认证机制，如 JWT（JSON Web Tokens）或 OAuth，而不是依赖于传统的基于会话的认证机制（这些机制依赖于浏览器的 Cookie）。这种无状态的认证方式意味着每个请求都必须包含所有必要的认证信息，而不是依赖于浏览器自动发送的 Cookie。</p>\n<ol>\n<li><strong>无状态认证</strong>：使用 JWT 或 OAuth 之类的令牌进行认证的 RESTful API，对 CSRF 攻击具有天然的防御性，因为攻击者无法获取并在恶意请求中使用这些令牌。这与传统的基于 Cookie 的会话认证不同，后者可能自动随请求发送，从而容易受到 CSRF 攻击。</li>\n<li><strong>使用 HTTP 方法</strong>：RESTful API 遵循使用不同 HTTP 方法（如 GET、POST、PUT、DELETE）的最佳实践，其中敏感操作（如更改或删除数据）应该使用 POST、PUT 或 DELETE 方法。由于 CSRF 攻击通常利用 GET 请求或某些情况下的 POST 请求，通过正确使用 HTTP 方法可以降低风险。</li>\n</ol>\n<h3 id=\"不是完全免疫\"><a href=\"#不是完全免疫\" class=\"headerlink\" title=\"不是完全免疫\"></a>不是完全免疫</h3><p>尽管上述因素可以减少 RESTful API 受到 CSRF 攻击的风险，但并不意味着它们完全免疫于 CSRF。例如，如果 RESTful API 错误地允许使用 GET 请求来执行有副作用的操作，那么它们仍然可能受到 CSRF 攻击的威胁。</p>\n<h3 id=\"防御措施\"><a href=\"#防御措施\" class=\"headerlink\" title=\"防御措施\"></a>防御措施</h3><ul>\n<li><strong>令牌基础认证</strong>：确保所有敏感操作都需要一个令牌，该令牌不会自动由浏览器发送（如 JWT）。</li>\n<li><strong>检查请求的来源</strong>：通过检查请求头（如 <code>Origin</code> 和 <code>Referer</code>）来验证请求是否来自预期的来源。</li>\n<li><strong>使用 CSRF 令牌</strong>：对于需要基于 Cookie 的会话认证的场景，可以在请求中加入 CSRF 令牌，确保请求是经过用户明确意图发起的。</li>\n</ul>\n<p>总结，RESTful API 的某些特性和使用的认证机制可能减少了 CSRF 攻击的风险，但开发者仍需采取适当的安全措施来确保其服务的安全。</p>\n"},{"title":"什么是jwttoken","mathjax":true,"_content":"\nJWT（JSON Web Token）是一种开放标准（RFC 7519），用于在两方之间安全地传递信息。它通常用于身份验证和信息交换，特别是在Web应用程序中。JWT的核心优点是它的紧凑性和自包含性，让它成为Web环境中理想的令牌格式。\n\nJWT通常由三部分组成，用点（`.`）分隔：\n\n1. **Header（头部）**：它是一个JSON对象，描述了令牌的类型（通常是JWT）以及使用的签名或加密算法（如HMAC、SHA256或RSA）。\n\n   示例：\n\n   ```\n   json复制代码{\n     \"alg\": \"HS256\",\n     \"typ\": \"JWT\"\n   }\n   ```\n\n2. **Payload（有效载荷）**：它也是一个JSON对象，包含了实际传输的声明（Claims）。声明是关于实体（通常是用户）和其他数据的语句。有三种类型的声明：注册声明（如iss、exp、sub）、公共声明和私有声明。\n\n   示例：\n\n   ```\n   json复制代码{\n     \"sub\": \"1234567890\",\n     \"name\": \"John Doe\",\n     \"admin\": true\n   }\n   ```\n\n3. **Signature（签名）**：为了创建签名部分，您必须使用编码后的header和payload以及一个秘密（只有发送者和接收者知道的秘密），使用header中指定的算法进行签名。\n\n   示例：\n\n   ```\n   plaintext复制代码HMACSHA256(\n     base64UrlEncode(header) + \".\" + base64UrlEncode(payload),\n     secret)\n   ```\n\n最终，一个JWT可能看起来像这样：\n\n```\n复制代码eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.dPxL6YlOxIlalLJ4HOdl7QzyiqM0gB1qjUmUISZaD10\n```\n\n这个字符串可以在客户端和服务器之间安全地传递，用于验证用户的身份或传递其他信息。服务器可以验证令牌的签名以确认其未被篡改，并从中提取有用的信息。\n\n\n\n## jwttoken有哪些使用场景？\n\n1. **用户认证**：这可能是 JWT 最广泛的应用场景。服务器在用户登录后会生成一个 JWT，并将其发送回客户端，之后客户端会在随后的请求中带上这个 JWT，服务器通过验证 JWT 来确认用户身份。\n2. **跨域身份验证（CORS）**：由于 JWT 是自包含的，因此，一个服务可以轻松识别请求是否已被授权，即便是跨域请求。\n3. **无状态会话**：JWT 由于其自包含性，可以实现无状态的会话机制。服务器不需要在数据库中保持会话状态，有益于减轻服务器压力并提高伸缩性。\n4. **移动设备认证**：JWT 非常适合在移动环境中使用，可以方便地在移动客户端和服务器之间交换认证信息。\n5. **单点登录（SSO）**：JWT 可以很方便地用于单点登录（SSO）场景，即用户在不同的系统和服务中仅需登录一次。\n6. **微服务之间的授权**：在微服务架构中，不同的服务之间可能需要交换受保护的资源。JWT 可以在这些服务之间提供一个高效和安全的认证和授权机制。\n7. **IoT（物联网）设备鉴权**：由于 JWT 的轻量级和灵活性，很适合在物联网环境下对设备进行鉴权。\n8. **访问令牌和刷新令牌**：在基于令牌的认证中，经常用 JWT 生成访问令牌（较短的有效期）和刷新令牌（较长的有效期），在保障系统安全的同时提高用户体验。\n\n通过这些使用场景，我们可以看到 JWT 作为一种跨平台的授权解决方案，在当今的众多应用和系统之间扮演着关键的角色。它凭借着可伸缩性、简洁和灵活性而广受欢迎。不过，跟任何技术一样，使用 JWT 时也要妥善处理好和安全性相关的考虑，例如：敏感信息的加密处理、令牌的定期轮换、以及恰当地设置过期时间等。这有助于降低潜在的风险并确保系统的安全性。\n\n在继续深入 JWT 的使用之前，有几点安全最佳实践需要注意：\n\n- **安全传输**：始终通过 HTTPS 来传输 JWT，以防止中间人攻击。\n- **令牌有效期**：为 JWT 设置适当的有效期可以减少被盗用的风险。短期的访问令牌和长期的刷新令牌结合使用是一种常见做法。\n- **签名算法**：使用强大的签名算法（如 RS256）来保证 JWT 的完整性和认证性。\n- **敏感信息**：避免在 JWT 中存储敏感信息，因为 JWT 的载荷是可以被解码的，除非它被加密。\n- **令牌刷新**：实现机制以允许令牌在不影响用户体验的情况下被安全地刷新和替换。\n\n尽管 JWT 提供了许多便利，但它也引入了特定的安全挑战，如令牌泄露、重放攻击、以及令牌的无状态性导致的撤销问题。因此，开发者在使用 JWT 时需要权衡其便利性和潜在的安全风险，确保采取适当的安全措施。\n\n最后，理解 JWT 的工作原理和它在系统中如何被使用是至关重要的。这包括了解 JWT 的三个主要部分：头部（Header）、载荷（Payload）、签名（Signature），以及它们是如何结合在一起提供安全保障的。通过合理的设计和实施，JWT 可以在保证安全的同时，为用户和系统之间的交互提供无缝和高效的体验。\n\n","source":"_posts/jwttoken.md","raw":"---\ntitle: 什么是jwttoken\nmathjax: true\ntags:\n    - 身份验证\ncategories:\n    - 网络安全\n\n---\n\nJWT（JSON Web Token）是一种开放标准（RFC 7519），用于在两方之间安全地传递信息。它通常用于身份验证和信息交换，特别是在Web应用程序中。JWT的核心优点是它的紧凑性和自包含性，让它成为Web环境中理想的令牌格式。\n\nJWT通常由三部分组成，用点（`.`）分隔：\n\n1. **Header（头部）**：它是一个JSON对象，描述了令牌的类型（通常是JWT）以及使用的签名或加密算法（如HMAC、SHA256或RSA）。\n\n   示例：\n\n   ```\n   json复制代码{\n     \"alg\": \"HS256\",\n     \"typ\": \"JWT\"\n   }\n   ```\n\n2. **Payload（有效载荷）**：它也是一个JSON对象，包含了实际传输的声明（Claims）。声明是关于实体（通常是用户）和其他数据的语句。有三种类型的声明：注册声明（如iss、exp、sub）、公共声明和私有声明。\n\n   示例：\n\n   ```\n   json复制代码{\n     \"sub\": \"1234567890\",\n     \"name\": \"John Doe\",\n     \"admin\": true\n   }\n   ```\n\n3. **Signature（签名）**：为了创建签名部分，您必须使用编码后的header和payload以及一个秘密（只有发送者和接收者知道的秘密），使用header中指定的算法进行签名。\n\n   示例：\n\n   ```\n   plaintext复制代码HMACSHA256(\n     base64UrlEncode(header) + \".\" + base64UrlEncode(payload),\n     secret)\n   ```\n\n最终，一个JWT可能看起来像这样：\n\n```\n复制代码eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.dPxL6YlOxIlalLJ4HOdl7QzyiqM0gB1qjUmUISZaD10\n```\n\n这个字符串可以在客户端和服务器之间安全地传递，用于验证用户的身份或传递其他信息。服务器可以验证令牌的签名以确认其未被篡改，并从中提取有用的信息。\n\n\n\n## jwttoken有哪些使用场景？\n\n1. **用户认证**：这可能是 JWT 最广泛的应用场景。服务器在用户登录后会生成一个 JWT，并将其发送回客户端，之后客户端会在随后的请求中带上这个 JWT，服务器通过验证 JWT 来确认用户身份。\n2. **跨域身份验证（CORS）**：由于 JWT 是自包含的，因此，一个服务可以轻松识别请求是否已被授权，即便是跨域请求。\n3. **无状态会话**：JWT 由于其自包含性，可以实现无状态的会话机制。服务器不需要在数据库中保持会话状态，有益于减轻服务器压力并提高伸缩性。\n4. **移动设备认证**：JWT 非常适合在移动环境中使用，可以方便地在移动客户端和服务器之间交换认证信息。\n5. **单点登录（SSO）**：JWT 可以很方便地用于单点登录（SSO）场景，即用户在不同的系统和服务中仅需登录一次。\n6. **微服务之间的授权**：在微服务架构中，不同的服务之间可能需要交换受保护的资源。JWT 可以在这些服务之间提供一个高效和安全的认证和授权机制。\n7. **IoT（物联网）设备鉴权**：由于 JWT 的轻量级和灵活性，很适合在物联网环境下对设备进行鉴权。\n8. **访问令牌和刷新令牌**：在基于令牌的认证中，经常用 JWT 生成访问令牌（较短的有效期）和刷新令牌（较长的有效期），在保障系统安全的同时提高用户体验。\n\n通过这些使用场景，我们可以看到 JWT 作为一种跨平台的授权解决方案，在当今的众多应用和系统之间扮演着关键的角色。它凭借着可伸缩性、简洁和灵活性而广受欢迎。不过，跟任何技术一样，使用 JWT 时也要妥善处理好和安全性相关的考虑，例如：敏感信息的加密处理、令牌的定期轮换、以及恰当地设置过期时间等。这有助于降低潜在的风险并确保系统的安全性。\n\n在继续深入 JWT 的使用之前，有几点安全最佳实践需要注意：\n\n- **安全传输**：始终通过 HTTPS 来传输 JWT，以防止中间人攻击。\n- **令牌有效期**：为 JWT 设置适当的有效期可以减少被盗用的风险。短期的访问令牌和长期的刷新令牌结合使用是一种常见做法。\n- **签名算法**：使用强大的签名算法（如 RS256）来保证 JWT 的完整性和认证性。\n- **敏感信息**：避免在 JWT 中存储敏感信息，因为 JWT 的载荷是可以被解码的，除非它被加密。\n- **令牌刷新**：实现机制以允许令牌在不影响用户体验的情况下被安全地刷新和替换。\n\n尽管 JWT 提供了许多便利，但它也引入了特定的安全挑战，如令牌泄露、重放攻击、以及令牌的无状态性导致的撤销问题。因此，开发者在使用 JWT 时需要权衡其便利性和潜在的安全风险，确保采取适当的安全措施。\n\n最后，理解 JWT 的工作原理和它在系统中如何被使用是至关重要的。这包括了解 JWT 的三个主要部分：头部（Header）、载荷（Payload）、签名（Signature），以及它们是如何结合在一起提供安全保障的。通过合理的设计和实施，JWT 可以在保证安全的同时，为用户和系统之间的交互提供无缝和高效的体验。\n\n","slug":"jwttoken","published":1,"date":"2024-02-23T10:21:53.301Z","updated":"2024-02-24T10:28:29.627Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltcs7hwg0008kjnn10yv6sqo","content":"<p>JWT（JSON Web Token）是一种开放标准（RFC 7519），用于在两方之间安全地传递信息。它通常用于身份验证和信息交换，特别是在Web应用程序中。JWT的核心优点是它的紧凑性和自包含性，让它成为Web环境中理想的令牌格式。</p>\n<p>JWT通常由三部分组成，用点（<code>.</code>）分隔：</p>\n<ol>\n<li><p><strong>Header（头部）</strong>：它是一个JSON对象，描述了令牌的类型（通常是JWT）以及使用的签名或加密算法（如HMAC、SHA256或RSA）。</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json复制代码&#123;</span><br><span class=\"line\">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class=\"line\">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Payload（有效载荷）</strong>：它也是一个JSON对象，包含了实际传输的声明（Claims）。声明是关于实体（通常是用户）和其他数据的语句。有三种类型的声明：注册声明（如iss、exp、sub）、公共声明和私有声明。</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json复制代码&#123;</span><br><span class=\"line\">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class=\"line\">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class=\"line\">  &quot;admin&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Signature（签名）</strong>：为了创建签名部分，您必须使用编码后的header和payload以及一个秘密（只有发送者和接收者知道的秘密），使用header中指定的算法进行签名。</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plaintext复制代码HMACSHA256(</span><br><span class=\"line\">  base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload),</span><br><span class=\"line\">  secret)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>最终，一个JWT可能看起来像这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">复制代码eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.dPxL6YlOxIlalLJ4HOdl7QzyiqM0gB1qjUmUISZaD10</span><br></pre></td></tr></table></figure>\n\n<p>这个字符串可以在客户端和服务器之间安全地传递，用于验证用户的身份或传递其他信息。服务器可以验证令牌的签名以确认其未被篡改，并从中提取有用的信息。</p>\n<h2 id=\"jwttoken有哪些使用场景？\"><a href=\"#jwttoken有哪些使用场景？\" class=\"headerlink\" title=\"jwttoken有哪些使用场景？\"></a>jwttoken有哪些使用场景？</h2><ol>\n<li><strong>用户认证</strong>：这可能是 JWT 最广泛的应用场景。服务器在用户登录后会生成一个 JWT，并将其发送回客户端，之后客户端会在随后的请求中带上这个 JWT，服务器通过验证 JWT 来确认用户身份。</li>\n<li><strong>跨域身份验证（CORS）</strong>：由于 JWT 是自包含的，因此，一个服务可以轻松识别请求是否已被授权，即便是跨域请求。</li>\n<li><strong>无状态会话</strong>：JWT 由于其自包含性，可以实现无状态的会话机制。服务器不需要在数据库中保持会话状态，有益于减轻服务器压力并提高伸缩性。</li>\n<li><strong>移动设备认证</strong>：JWT 非常适合在移动环境中使用，可以方便地在移动客户端和服务器之间交换认证信息。</li>\n<li><strong>单点登录（SSO）</strong>：JWT 可以很方便地用于单点登录（SSO）场景，即用户在不同的系统和服务中仅需登录一次。</li>\n<li><strong>微服务之间的授权</strong>：在微服务架构中，不同的服务之间可能需要交换受保护的资源。JWT 可以在这些服务之间提供一个高效和安全的认证和授权机制。</li>\n<li><strong>IoT（物联网）设备鉴权</strong>：由于 JWT 的轻量级和灵活性，很适合在物联网环境下对设备进行鉴权。</li>\n<li><strong>访问令牌和刷新令牌</strong>：在基于令牌的认证中，经常用 JWT 生成访问令牌（较短的有效期）和刷新令牌（较长的有效期），在保障系统安全的同时提高用户体验。</li>\n</ol>\n<p>通过这些使用场景，我们可以看到 JWT 作为一种跨平台的授权解决方案，在当今的众多应用和系统之间扮演着关键的角色。它凭借着可伸缩性、简洁和灵活性而广受欢迎。不过，跟任何技术一样，使用 JWT 时也要妥善处理好和安全性相关的考虑，例如：敏感信息的加密处理、令牌的定期轮换、以及恰当地设置过期时间等。这有助于降低潜在的风险并确保系统的安全性。</p>\n<p>在继续深入 JWT 的使用之前，有几点安全最佳实践需要注意：</p>\n<ul>\n<li><strong>安全传输</strong>：始终通过 HTTPS 来传输 JWT，以防止中间人攻击。</li>\n<li><strong>令牌有效期</strong>：为 JWT 设置适当的有效期可以减少被盗用的风险。短期的访问令牌和长期的刷新令牌结合使用是一种常见做法。</li>\n<li><strong>签名算法</strong>：使用强大的签名算法（如 RS256）来保证 JWT 的完整性和认证性。</li>\n<li><strong>敏感信息</strong>：避免在 JWT 中存储敏感信息，因为 JWT 的载荷是可以被解码的，除非它被加密。</li>\n<li><strong>令牌刷新</strong>：实现机制以允许令牌在不影响用户体验的情况下被安全地刷新和替换。</li>\n</ul>\n<p>尽管 JWT 提供了许多便利，但它也引入了特定的安全挑战，如令牌泄露、重放攻击、以及令牌的无状态性导致的撤销问题。因此，开发者在使用 JWT 时需要权衡其便利性和潜在的安全风险，确保采取适当的安全措施。</p>\n<p>最后，理解 JWT 的工作原理和它在系统中如何被使用是至关重要的。这包括了解 JWT 的三个主要部分：头部（Header）、载荷（Payload）、签名（Signature），以及它们是如何结合在一起提供安全保障的。通过合理的设计和实施，JWT 可以在保证安全的同时，为用户和系统之间的交互提供无缝和高效的体验。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>JWT（JSON Web Token）是一种开放标准（RFC 7519），用于在两方之间安全地传递信息。它通常用于身份验证和信息交换，特别是在Web应用程序中。JWT的核心优点是它的紧凑性和自包含性，让它成为Web环境中理想的令牌格式。</p>\n<p>JWT通常由三部分组成，用点（<code>.</code>）分隔：</p>\n<ol>\n<li><p><strong>Header（头部）</strong>：它是一个JSON对象，描述了令牌的类型（通常是JWT）以及使用的签名或加密算法（如HMAC、SHA256或RSA）。</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json复制代码&#123;</span><br><span class=\"line\">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class=\"line\">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Payload（有效载荷）</strong>：它也是一个JSON对象，包含了实际传输的声明（Claims）。声明是关于实体（通常是用户）和其他数据的语句。有三种类型的声明：注册声明（如iss、exp、sub）、公共声明和私有声明。</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">json复制代码&#123;</span><br><span class=\"line\">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class=\"line\">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class=\"line\">  &quot;admin&quot;: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Signature（签名）</strong>：为了创建签名部分，您必须使用编码后的header和payload以及一个秘密（只有发送者和接收者知道的秘密），使用header中指定的算法进行签名。</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plaintext复制代码HMACSHA256(</span><br><span class=\"line\">  base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload),</span><br><span class=\"line\">  secret)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>最终，一个JWT可能看起来像这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">复制代码eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.dPxL6YlOxIlalLJ4HOdl7QzyiqM0gB1qjUmUISZaD10</span><br></pre></td></tr></table></figure>\n\n<p>这个字符串可以在客户端和服务器之间安全地传递，用于验证用户的身份或传递其他信息。服务器可以验证令牌的签名以确认其未被篡改，并从中提取有用的信息。</p>\n<h2 id=\"jwttoken有哪些使用场景？\"><a href=\"#jwttoken有哪些使用场景？\" class=\"headerlink\" title=\"jwttoken有哪些使用场景？\"></a>jwttoken有哪些使用场景？</h2><ol>\n<li><strong>用户认证</strong>：这可能是 JWT 最广泛的应用场景。服务器在用户登录后会生成一个 JWT，并将其发送回客户端，之后客户端会在随后的请求中带上这个 JWT，服务器通过验证 JWT 来确认用户身份。</li>\n<li><strong>跨域身份验证（CORS）</strong>：由于 JWT 是自包含的，因此，一个服务可以轻松识别请求是否已被授权，即便是跨域请求。</li>\n<li><strong>无状态会话</strong>：JWT 由于其自包含性，可以实现无状态的会话机制。服务器不需要在数据库中保持会话状态，有益于减轻服务器压力并提高伸缩性。</li>\n<li><strong>移动设备认证</strong>：JWT 非常适合在移动环境中使用，可以方便地在移动客户端和服务器之间交换认证信息。</li>\n<li><strong>单点登录（SSO）</strong>：JWT 可以很方便地用于单点登录（SSO）场景，即用户在不同的系统和服务中仅需登录一次。</li>\n<li><strong>微服务之间的授权</strong>：在微服务架构中，不同的服务之间可能需要交换受保护的资源。JWT 可以在这些服务之间提供一个高效和安全的认证和授权机制。</li>\n<li><strong>IoT（物联网）设备鉴权</strong>：由于 JWT 的轻量级和灵活性，很适合在物联网环境下对设备进行鉴权。</li>\n<li><strong>访问令牌和刷新令牌</strong>：在基于令牌的认证中，经常用 JWT 生成访问令牌（较短的有效期）和刷新令牌（较长的有效期），在保障系统安全的同时提高用户体验。</li>\n</ol>\n<p>通过这些使用场景，我们可以看到 JWT 作为一种跨平台的授权解决方案，在当今的众多应用和系统之间扮演着关键的角色。它凭借着可伸缩性、简洁和灵活性而广受欢迎。不过，跟任何技术一样，使用 JWT 时也要妥善处理好和安全性相关的考虑，例如：敏感信息的加密处理、令牌的定期轮换、以及恰当地设置过期时间等。这有助于降低潜在的风险并确保系统的安全性。</p>\n<p>在继续深入 JWT 的使用之前，有几点安全最佳实践需要注意：</p>\n<ul>\n<li><strong>安全传输</strong>：始终通过 HTTPS 来传输 JWT，以防止中间人攻击。</li>\n<li><strong>令牌有效期</strong>：为 JWT 设置适当的有效期可以减少被盗用的风险。短期的访问令牌和长期的刷新令牌结合使用是一种常见做法。</li>\n<li><strong>签名算法</strong>：使用强大的签名算法（如 RS256）来保证 JWT 的完整性和认证性。</li>\n<li><strong>敏感信息</strong>：避免在 JWT 中存储敏感信息，因为 JWT 的载荷是可以被解码的，除非它被加密。</li>\n<li><strong>令牌刷新</strong>：实现机制以允许令牌在不影响用户体验的情况下被安全地刷新和替换。</li>\n</ul>\n<p>尽管 JWT 提供了许多便利，但它也引入了特定的安全挑战，如令牌泄露、重放攻击、以及令牌的无状态性导致的撤销问题。因此，开发者在使用 JWT 时需要权衡其便利性和潜在的安全风险，确保采取适当的安全措施。</p>\n<p>最后，理解 JWT 的工作原理和它在系统中如何被使用是至关重要的。这包括了解 JWT 的三个主要部分：头部（Header）、载荷（Payload）、签名（Signature），以及它们是如何结合在一起提供安全保障的。通过合理的设计和实施，JWT 可以在保证安全的同时，为用户和系统之间的交互提供无缝和高效的体验。</p>\n"},{"title":"httponly原理？","mathjax":true,"_content":"\n## 设置了httponly后无法被javascript调用？那用户怎么发xhr请求？\n\n浏览器自动发送带有`HttpOnly`标志的Cookie是其内置功能的一部分，不需要开发者或用户进行特别设置。当服务器通过设置一个带有`HttpOnly`标志的Cookie响应一个HTTP请求时，这个Cookie会被浏览器存储起来。之后，每当用户的浏览器向同一域名发送请求时，浏览器会自动附加这个域名下的所有Cookie，包括那些标记为`HttpOnly`的Cookie。\n\n### 实现自动发送`HttpOnly` Cookie的步骤：\n\n1. **服务器设置Cookie**：在服务器处理用户登录或其他需要设置Cookie的请求时，通过响应头`Set-Cookie`加上`HttpOnly`标志来设置Cookie。例如：\n\n   ```\n   复制代码Set-Cookie: sessionId=abc123; Path=/; HttpOnly\n   ```\n\n   这告诉浏览器保存这个名为`sessionId`的Cookie，并在之后的请求中自动发送给服务器，同时因为`HttpOnly`的存在，这个Cookie不能被客户端JavaScript访问。\n\n2. **浏览器存储和管理Cookie**：一旦浏览器接收到这个设置了`HttpOnly`标志的Cookie，它会将其存储起来，并在之后向相同域名发送的所有请求中自动包含这个Cookie。\n\n3. **自动附加Cookie到请求**：用户在与服务器交互时（例如，浏览网页、提交表单等），浏览器会根据需要自动将存储的Cookie附加到向该域名的请求头中，包括那些`HttpOnly`的Cookie。\n\n### 重要点：\n\n- **域名和路径**：浏览器只会将Cookie发送给设置它们的相同域名和路径。如果Cookie的`Domain`和`Path`属性限制了其作用范围，浏览器会遵守这些规则，只在相应的域和路径下发送Cookie。\n- **安全和策略**：为增强安全性，建议使用`Secure`标志（仅通过HTTPS发送Cookie）和`SameSite`标志（控制Cookie在跨站请求中的发送行为）与`HttpOnly`标志一同使用。\n\n通过这种方式，浏览器确保了`HttpOnly` Cookie的安全性，使其在客户端脚本中不可访问，同时保证了这些Cookie能够在用户与服务器交互时被自动使用，从而支持如会话管理和用户身份验证等功能。\n\n注：\n\nhttponly能防止客户端js脚本访问和修改凭据，可以在一定程度上防御xss，例如黑客无法做到通过js将用户的cookie发送给自己，但是如果诱导用户自己执行js脚本发送请求，请求还是会发送成功。因此增加了httponly后，黑客实施xss攻击确实更加繁琐了。\n","source":"_posts/httponly原理.md","raw":"---\ntitle: httponly原理？\nmathjax: true\ntags:\n    - httponly\n    - xss\ncategories:\n    - 网络安全\n\n---\n\n## 设置了httponly后无法被javascript调用？那用户怎么发xhr请求？\n\n浏览器自动发送带有`HttpOnly`标志的Cookie是其内置功能的一部分，不需要开发者或用户进行特别设置。当服务器通过设置一个带有`HttpOnly`标志的Cookie响应一个HTTP请求时，这个Cookie会被浏览器存储起来。之后，每当用户的浏览器向同一域名发送请求时，浏览器会自动附加这个域名下的所有Cookie，包括那些标记为`HttpOnly`的Cookie。\n\n### 实现自动发送`HttpOnly` Cookie的步骤：\n\n1. **服务器设置Cookie**：在服务器处理用户登录或其他需要设置Cookie的请求时，通过响应头`Set-Cookie`加上`HttpOnly`标志来设置Cookie。例如：\n\n   ```\n   复制代码Set-Cookie: sessionId=abc123; Path=/; HttpOnly\n   ```\n\n   这告诉浏览器保存这个名为`sessionId`的Cookie，并在之后的请求中自动发送给服务器，同时因为`HttpOnly`的存在，这个Cookie不能被客户端JavaScript访问。\n\n2. **浏览器存储和管理Cookie**：一旦浏览器接收到这个设置了`HttpOnly`标志的Cookie，它会将其存储起来，并在之后向相同域名发送的所有请求中自动包含这个Cookie。\n\n3. **自动附加Cookie到请求**：用户在与服务器交互时（例如，浏览网页、提交表单等），浏览器会根据需要自动将存储的Cookie附加到向该域名的请求头中，包括那些`HttpOnly`的Cookie。\n\n### 重要点：\n\n- **域名和路径**：浏览器只会将Cookie发送给设置它们的相同域名和路径。如果Cookie的`Domain`和`Path`属性限制了其作用范围，浏览器会遵守这些规则，只在相应的域和路径下发送Cookie。\n- **安全和策略**：为增强安全性，建议使用`Secure`标志（仅通过HTTPS发送Cookie）和`SameSite`标志（控制Cookie在跨站请求中的发送行为）与`HttpOnly`标志一同使用。\n\n通过这种方式，浏览器确保了`HttpOnly` Cookie的安全性，使其在客户端脚本中不可访问，同时保证了这些Cookie能够在用户与服务器交互时被自动使用，从而支持如会话管理和用户身份验证等功能。\n\n注：\n\nhttponly能防止客户端js脚本访问和修改凭据，可以在一定程度上防御xss，例如黑客无法做到通过js将用户的cookie发送给自己，但是如果诱导用户自己执行js脚本发送请求，请求还是会发送成功。因此增加了httponly后，黑客实施xss攻击确实更加繁琐了。\n","slug":"httponly原理","published":1,"date":"2024-02-24T09:50:56.023Z","updated":"2024-02-24T10:09:57.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltcs7hwh0009kjnn6kwt62gm","content":"<h2 id=\"设置了httponly后无法被javascript调用？那用户怎么发xhr请求？\"><a href=\"#设置了httponly后无法被javascript调用？那用户怎么发xhr请求？\" class=\"headerlink\" title=\"设置了httponly后无法被javascript调用？那用户怎么发xhr请求？\"></a>设置了httponly后无法被javascript调用？那用户怎么发xhr请求？</h2><p>浏览器自动发送带有<code>HttpOnly</code>标志的Cookie是其内置功能的一部分，不需要开发者或用户进行特别设置。当服务器通过设置一个带有<code>HttpOnly</code>标志的Cookie响应一个HTTP请求时，这个Cookie会被浏览器存储起来。之后，每当用户的浏览器向同一域名发送请求时，浏览器会自动附加这个域名下的所有Cookie，包括那些标记为<code>HttpOnly</code>的Cookie。</p>\n<h3 id=\"实现自动发送HttpOnly-Cookie的步骤：\"><a href=\"#实现自动发送HttpOnly-Cookie的步骤：\" class=\"headerlink\" title=\"实现自动发送HttpOnly Cookie的步骤：\"></a>实现自动发送<code>HttpOnly</code> Cookie的步骤：</h3><ol>\n<li><p><strong>服务器设置Cookie</strong>：在服务器处理用户登录或其他需要设置Cookie的请求时，通过响应头<code>Set-Cookie</code>加上<code>HttpOnly</code>标志来设置Cookie。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">复制代码Set-Cookie: sessionId=abc123; Path=/; HttpOnly</span><br></pre></td></tr></table></figure>\n\n<p>这告诉浏览器保存这个名为<code>sessionId</code>的Cookie，并在之后的请求中自动发送给服务器，同时因为<code>HttpOnly</code>的存在，这个Cookie不能被客户端JavaScript访问。</p>\n</li>\n<li><p><strong>浏览器存储和管理Cookie</strong>：一旦浏览器接收到这个设置了<code>HttpOnly</code>标志的Cookie，它会将其存储起来，并在之后向相同域名发送的所有请求中自动包含这个Cookie。</p>\n</li>\n<li><p><strong>自动附加Cookie到请求</strong>：用户在与服务器交互时（例如，浏览网页、提交表单等），浏览器会根据需要自动将存储的Cookie附加到向该域名的请求头中，包括那些<code>HttpOnly</code>的Cookie。</p>\n</li>\n</ol>\n<h3 id=\"重要点：\"><a href=\"#重要点：\" class=\"headerlink\" title=\"重要点：\"></a>重要点：</h3><ul>\n<li><strong>域名和路径</strong>：浏览器只会将Cookie发送给设置它们的相同域名和路径。如果Cookie的<code>Domain</code>和<code>Path</code>属性限制了其作用范围，浏览器会遵守这些规则，只在相应的域和路径下发送Cookie。</li>\n<li><strong>安全和策略</strong>：为增强安全性，建议使用<code>Secure</code>标志（仅通过HTTPS发送Cookie）和<code>SameSite</code>标志（控制Cookie在跨站请求中的发送行为）与<code>HttpOnly</code>标志一同使用。</li>\n</ul>\n<p>通过这种方式，浏览器确保了<code>HttpOnly</code> Cookie的安全性，使其在客户端脚本中不可访问，同时保证了这些Cookie能够在用户与服务器交互时被自动使用，从而支持如会话管理和用户身份验证等功能。</p>\n<p>注：</p>\n<p>httponly能防止客户端js脚本访问和修改凭据，可以在一定程度上防御xss，例如黑客无法做到通过js将用户的cookie发送给自己，但是如果诱导用户自己执行js脚本发送请求，请求还是会发送成功。因此增加了httponly后，黑客实施xss攻击确实更加繁琐了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"设置了httponly后无法被javascript调用？那用户怎么发xhr请求？\"><a href=\"#设置了httponly后无法被javascript调用？那用户怎么发xhr请求？\" class=\"headerlink\" title=\"设置了httponly后无法被javascript调用？那用户怎么发xhr请求？\"></a>设置了httponly后无法被javascript调用？那用户怎么发xhr请求？</h2><p>浏览器自动发送带有<code>HttpOnly</code>标志的Cookie是其内置功能的一部分，不需要开发者或用户进行特别设置。当服务器通过设置一个带有<code>HttpOnly</code>标志的Cookie响应一个HTTP请求时，这个Cookie会被浏览器存储起来。之后，每当用户的浏览器向同一域名发送请求时，浏览器会自动附加这个域名下的所有Cookie，包括那些标记为<code>HttpOnly</code>的Cookie。</p>\n<h3 id=\"实现自动发送HttpOnly-Cookie的步骤：\"><a href=\"#实现自动发送HttpOnly-Cookie的步骤：\" class=\"headerlink\" title=\"实现自动发送HttpOnly Cookie的步骤：\"></a>实现自动发送<code>HttpOnly</code> Cookie的步骤：</h3><ol>\n<li><p><strong>服务器设置Cookie</strong>：在服务器处理用户登录或其他需要设置Cookie的请求时，通过响应头<code>Set-Cookie</code>加上<code>HttpOnly</code>标志来设置Cookie。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">复制代码Set-Cookie: sessionId=abc123; Path=/; HttpOnly</span><br></pre></td></tr></table></figure>\n\n<p>这告诉浏览器保存这个名为<code>sessionId</code>的Cookie，并在之后的请求中自动发送给服务器，同时因为<code>HttpOnly</code>的存在，这个Cookie不能被客户端JavaScript访问。</p>\n</li>\n<li><p><strong>浏览器存储和管理Cookie</strong>：一旦浏览器接收到这个设置了<code>HttpOnly</code>标志的Cookie，它会将其存储起来，并在之后向相同域名发送的所有请求中自动包含这个Cookie。</p>\n</li>\n<li><p><strong>自动附加Cookie到请求</strong>：用户在与服务器交互时（例如，浏览网页、提交表单等），浏览器会根据需要自动将存储的Cookie附加到向该域名的请求头中，包括那些<code>HttpOnly</code>的Cookie。</p>\n</li>\n</ol>\n<h3 id=\"重要点：\"><a href=\"#重要点：\" class=\"headerlink\" title=\"重要点：\"></a>重要点：</h3><ul>\n<li><strong>域名和路径</strong>：浏览器只会将Cookie发送给设置它们的相同域名和路径。如果Cookie的<code>Domain</code>和<code>Path</code>属性限制了其作用范围，浏览器会遵守这些规则，只在相应的域和路径下发送Cookie。</li>\n<li><strong>安全和策略</strong>：为增强安全性，建议使用<code>Secure</code>标志（仅通过HTTPS发送Cookie）和<code>SameSite</code>标志（控制Cookie在跨站请求中的发送行为）与<code>HttpOnly</code>标志一同使用。</li>\n</ul>\n<p>通过这种方式，浏览器确保了<code>HttpOnly</code> Cookie的安全性，使其在客户端脚本中不可访问，同时保证了这些Cookie能够在用户与服务器交互时被自动使用，从而支持如会话管理和用户身份验证等功能。</p>\n<p>注：</p>\n<p>httponly能防止客户端js脚本访问和修改凭据，可以在一定程度上防御xss，例如黑客无法做到通过js将用户的cookie发送给自己，但是如果诱导用户自己执行js脚本发送请求，请求还是会发送成功。因此增加了httponly后，黑客实施xss攻击确实更加繁琐了。</p>\n"},{"title":"Access-control-Allow-Origin响应头为什么会生效","mathjax":true,"_content":"\n`Access-Control-Allow-Origin` 是一个HTTP响应头，用于指示允许访问资源的域（origin）。当服务器在HTTP响应中包含了 `Access-Control-Allow-Origin` 头部，并设置了合适的值时，浏览器将会根据这个设置来确定是否允许前端页面对该资源进行跨域访问。\n\n具体而言，如果服务器设置了 `Access-Control-Allow-Origin: https://www.example.com`，那么仅来自 [https://www.example.com](https://www.example.com/) 的请求才会被允许访问资源。如果请求来自其他域，浏览器会阻止对该资源的访问，从而实现了跨域访问的控制。\n\n这种限制是由浏览器实施的，因为浏览器遵循同源策略（Same-origin policy），发送post请求前会先发一个options请求，浏览器会先检查并遵循服务器返回的 `Access-Control-Allow-Origin` 头部的设定，从而确保跨域请求的安全性。\n\n总之，`Access-Control-Allow-Origin` 头部生效是因为浏览器会根据这个设置来决定是否允许特定域的前端页面对资源进行跨域访问，从而保障了相应的安全策略得以执行。\n\n","source":"_posts/跨域.md","raw":"---\ntitle: Access-control-Allow-Origin响应头为什么会生效\nmathjax: true\ntags:\n    - 跨域\ncategories:\n    - 网络安全\n\n---\n\n`Access-Control-Allow-Origin` 是一个HTTP响应头，用于指示允许访问资源的域（origin）。当服务器在HTTP响应中包含了 `Access-Control-Allow-Origin` 头部，并设置了合适的值时，浏览器将会根据这个设置来确定是否允许前端页面对该资源进行跨域访问。\n\n具体而言，如果服务器设置了 `Access-Control-Allow-Origin: https://www.example.com`，那么仅来自 [https://www.example.com](https://www.example.com/) 的请求才会被允许访问资源。如果请求来自其他域，浏览器会阻止对该资源的访问，从而实现了跨域访问的控制。\n\n这种限制是由浏览器实施的，因为浏览器遵循同源策略（Same-origin policy），发送post请求前会先发一个options请求，浏览器会先检查并遵循服务器返回的 `Access-Control-Allow-Origin` 头部的设定，从而确保跨域请求的安全性。\n\n总之，`Access-Control-Allow-Origin` 头部生效是因为浏览器会根据这个设置来决定是否允许特定域的前端页面对资源进行跨域访问，从而保障了相应的安全策略得以执行。\n\n","slug":"跨域","published":1,"date":"2024-02-23T10:21:53.302Z","updated":"2024-02-24T09:41:43.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltcs7hwh000bkjnn724a1bar","content":"<p><code>Access-Control-Allow-Origin</code> 是一个HTTP响应头，用于指示允许访问资源的域（origin）。当服务器在HTTP响应中包含了 <code>Access-Control-Allow-Origin</code> 头部，并设置了合适的值时，浏览器将会根据这个设置来确定是否允许前端页面对该资源进行跨域访问。</p>\n<p>具体而言，如果服务器设置了 <code>Access-Control-Allow-Origin: https://www.example.com</code>，那么仅来自 <a href=\"https://www.example.com/\">https://www.example.com</a> 的请求才会被允许访问资源。如果请求来自其他域，浏览器会阻止对该资源的访问，从而实现了跨域访问的控制。</p>\n<p>这种限制是由浏览器实施的，因为浏览器遵循同源策略（Same-origin policy），发送post请求前会先发一个options请求，浏览器会先检查并遵循服务器返回的 <code>Access-Control-Allow-Origin</code> 头部的设定，从而确保跨域请求的安全性。</p>\n<p>总之，<code>Access-Control-Allow-Origin</code> 头部生效是因为浏览器会根据这个设置来决定是否允许特定域的前端页面对资源进行跨域访问，从而保障了相应的安全策略得以执行。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>Access-Control-Allow-Origin</code> 是一个HTTP响应头，用于指示允许访问资源的域（origin）。当服务器在HTTP响应中包含了 <code>Access-Control-Allow-Origin</code> 头部，并设置了合适的值时，浏览器将会根据这个设置来确定是否允许前端页面对该资源进行跨域访问。</p>\n<p>具体而言，如果服务器设置了 <code>Access-Control-Allow-Origin: https://www.example.com</code>，那么仅来自 <a href=\"https://www.example.com/\">https://www.example.com</a> 的请求才会被允许访问资源。如果请求来自其他域，浏览器会阻止对该资源的访问，从而实现了跨域访问的控制。</p>\n<p>这种限制是由浏览器实施的，因为浏览器遵循同源策略（Same-origin policy），发送post请求前会先发一个options请求，浏览器会先检查并遵循服务器返回的 <code>Access-Control-Allow-Origin</code> 头部的设定，从而确保跨域请求的安全性。</p>\n<p>总之，<code>Access-Control-Allow-Origin</code> 头部生效是因为浏览器会根据这个设置来决定是否允许特定域的前端页面对资源进行跨域访问，从而保障了相应的安全策略得以执行。</p>\n"},{"title":"以太坊学习","mathjax":true,"_content":"\n## 1. 什么是区块链\n\n**区块链**（英语：blockchain[[1\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-te20151031-1)[[2\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-fortune20160515-2)[[3\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-nyt20160521-3)或block chain[[4\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-primer-4)[[5\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-obmh-5)）是借由[密码学](https://zh.wikipedia.org/wiki/密碼學)[[1\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-te20151031-1)[[6\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-cryptocurrencytech-6)与[共识机制](https://zh.wikipedia.org/wiki/共識機制)等技术建立与存储庞大交易资料链的[点对点](https://zh.wikipedia.org/wiki/對等網路)网络系统。\n\n每一个区块包含了前一个区块的[加密散列](https://zh.wikipedia.org/wiki/密碼雜湊函數)、相应时间戳记以及交易资料（通常用[默克尔树](https://zh.wikipedia.org/wiki/哈希树)（Merkle tree）算法计算的散列值表示）[[7\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-IPblockchain-7)，这样的设计使得区块内容具有难以篡改的特性。但如果掌握区块链节点51%以上的运算力，就能操控区块链的内容。如果一开始写入的内容是错误的内容，那么区块链技术只是让错误的内容难以被篡改。[[8\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-storm.mg-8)\n\n区块链有哪些应用？\n\n+ 供应链系统：记录供应链的各个环节实时追踪和记录产品的生产、运输和存储情况\n+ 智能合约：一种自动执行合同的计算机程序，无需第三方介入即可履行合同，无法人为干预\n+ 物联网：构建去中心化的数据库，确保数据一致\n\n参考https://www.fxiaoke.com/crm/information-40755.html\n\n## 2. 以太坊\n\n一种支持智能合约的公共区块链平台，其原生加密货币以太币是全球市值第二高的加密货币，仅次于比特币\n\n## 3. 以太坊账户管理\n\nhttps://huweihuang.com/blockchain-notes/ethereum/ethereum-account-management.html\n\n出现\n\nReferenceError: personal is not defined\n\n​\tat <eval>:1:1(0)\n\n解决办法：\n\nhttps://blog.csdn.net/yawei313/article/details/132460948\n\n\n\n\n\n","source":"_posts/以太坊学习.md","raw":"---\ntitle: 以太坊学习\nmathjax: true\ntags:\n    - 以太坊\ncategories:\n    - 区块链\n\n---\n\n## 1. 什么是区块链\n\n**区块链**（英语：blockchain[[1\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-te20151031-1)[[2\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-fortune20160515-2)[[3\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-nyt20160521-3)或block chain[[4\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-primer-4)[[5\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-obmh-5)）是借由[密码学](https://zh.wikipedia.org/wiki/密碼學)[[1\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-te20151031-1)[[6\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-cryptocurrencytech-6)与[共识机制](https://zh.wikipedia.org/wiki/共識機制)等技术建立与存储庞大交易资料链的[点对点](https://zh.wikipedia.org/wiki/對等網路)网络系统。\n\n每一个区块包含了前一个区块的[加密散列](https://zh.wikipedia.org/wiki/密碼雜湊函數)、相应时间戳记以及交易资料（通常用[默克尔树](https://zh.wikipedia.org/wiki/哈希树)（Merkle tree）算法计算的散列值表示）[[7\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-IPblockchain-7)，这样的设计使得区块内容具有难以篡改的特性。但如果掌握区块链节点51%以上的运算力，就能操控区块链的内容。如果一开始写入的内容是错误的内容，那么区块链技术只是让错误的内容难以被篡改。[[8\\]](https://zh.wikipedia.org/wiki/区块链#cite_note-storm.mg-8)\n\n区块链有哪些应用？\n\n+ 供应链系统：记录供应链的各个环节实时追踪和记录产品的生产、运输和存储情况\n+ 智能合约：一种自动执行合同的计算机程序，无需第三方介入即可履行合同，无法人为干预\n+ 物联网：构建去中心化的数据库，确保数据一致\n\n参考https://www.fxiaoke.com/crm/information-40755.html\n\n## 2. 以太坊\n\n一种支持智能合约的公共区块链平台，其原生加密货币以太币是全球市值第二高的加密货币，仅次于比特币\n\n## 3. 以太坊账户管理\n\nhttps://huweihuang.com/blockchain-notes/ethereum/ethereum-account-management.html\n\n出现\n\nReferenceError: personal is not defined\n\n​\tat <eval>:1:1(0)\n\n解决办法：\n\nhttps://blog.csdn.net/yawei313/article/details/132460948\n\n\n\n\n\n","slug":"以太坊学习","published":1,"date":"2024-02-23T10:21:53.303Z","updated":"2024-02-24T10:27:20.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltcs7hwh000ckjnnfhtnawo1","content":"<h2 id=\"1-什么是区块链\"><a href=\"#1-什么是区块链\" class=\"headerlink\" title=\"1. 什么是区块链\"></a>1. 什么是区块链</h2><p><strong>区块链</strong>（英语：blockchain[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-te20151031-1\">1]</a>[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-fortune20160515-2\">2]</a>[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-nyt20160521-3\">3]</a>或block chain[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-primer-4\">4]</a>[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-obmh-5\">5]</a>）是借由<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E5%AD%B8\">密码学</a>[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-te20151031-1\">1]</a>[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-cryptocurrencytech-6\">6]</a>与<a href=\"https://zh.wikipedia.org/wiki/%E5%85%B1%E8%AD%98%E6%A9%9F%E5%88%B6\">共识机制</a>等技术建立与存储庞大交易资料链的<a href=\"https://zh.wikipedia.org/wiki/%E5%B0%8D%E7%AD%89%E7%B6%B2%E8%B7%AF\">点对点</a>网络系统。</p>\n<p>每一个区块包含了前一个区块的<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8\">加密散列</a>、相应时间戳记以及交易资料（通常用<a href=\"https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E6%A0%91\">默克尔树</a>（Merkle tree）算法计算的散列值表示）[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-IPblockchain-7\">7]</a>，这样的设计使得区块内容具有难以篡改的特性。但如果掌握区块链节点51%以上的运算力，就能操控区块链的内容。如果一开始写入的内容是错误的内容，那么区块链技术只是让错误的内容难以被篡改。[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-storm.mg-8\">8]</a></p>\n<p>区块链有哪些应用？</p>\n<ul>\n<li>供应链系统：记录供应链的各个环节实时追踪和记录产品的生产、运输和存储情况</li>\n<li>智能合约：一种自动执行合同的计算机程序，无需第三方介入即可履行合同，无法人为干预</li>\n<li>物联网：构建去中心化的数据库，确保数据一致</li>\n</ul>\n<p>参考<a href=\"https://www.fxiaoke.com/crm/information-40755.html\">https://www.fxiaoke.com/crm/information-40755.html</a></p>\n<h2 id=\"2-以太坊\"><a href=\"#2-以太坊\" class=\"headerlink\" title=\"2. 以太坊\"></a>2. 以太坊</h2><p>一种支持智能合约的公共区块链平台，其原生加密货币以太币是全球市值第二高的加密货币，仅次于比特币</p>\n<h2 id=\"3-以太坊账户管理\"><a href=\"#3-以太坊账户管理\" class=\"headerlink\" title=\"3. 以太坊账户管理\"></a>3. 以太坊账户管理</h2><p><a href=\"https://huweihuang.com/blockchain-notes/ethereum/ethereum-account-management.html\">https://huweihuang.com/blockchain-notes/ethereum/ethereum-account-management.html</a></p>\n<p>出现</p>\n<p>ReferenceError: personal is not defined</p>\n<p>​\tat <eval>:1:1(0)</eval></p>\n<p>解决办法：</p>\n<p><a href=\"https://blog.csdn.net/yawei313/article/details/132460948\">https://blog.csdn.net/yawei313/article/details/132460948</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-什么是区块链\"><a href=\"#1-什么是区块链\" class=\"headerlink\" title=\"1. 什么是区块链\"></a>1. 什么是区块链</h2><p><strong>区块链</strong>（英语：blockchain[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-te20151031-1\">1]</a>[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-fortune20160515-2\">2]</a>[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-nyt20160521-3\">3]</a>或block chain[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-primer-4\">4]</a>[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-obmh-5\">5]</a>）是借由<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E5%AD%B8\">密码学</a>[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-te20151031-1\">1]</a>[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-cryptocurrencytech-6\">6]</a>与<a href=\"https://zh.wikipedia.org/wiki/%E5%85%B1%E8%AD%98%E6%A9%9F%E5%88%B6\">共识机制</a>等技术建立与存储庞大交易资料链的<a href=\"https://zh.wikipedia.org/wiki/%E5%B0%8D%E7%AD%89%E7%B6%B2%E8%B7%AF\">点对点</a>网络系统。</p>\n<p>每一个区块包含了前一个区块的<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E9%9B%9C%E6%B9%8A%E5%87%BD%E6%95%B8\">加密散列</a>、相应时间戳记以及交易资料（通常用<a href=\"https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E6%A0%91\">默克尔树</a>（Merkle tree）算法计算的散列值表示）[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-IPblockchain-7\">7]</a>，这样的设计使得区块内容具有难以篡改的特性。但如果掌握区块链节点51%以上的运算力，就能操控区块链的内容。如果一开始写入的内容是错误的内容，那么区块链技术只是让错误的内容难以被篡改。[<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE#cite_note-storm.mg-8\">8]</a></p>\n<p>区块链有哪些应用？</p>\n<ul>\n<li>供应链系统：记录供应链的各个环节实时追踪和记录产品的生产、运输和存储情况</li>\n<li>智能合约：一种自动执行合同的计算机程序，无需第三方介入即可履行合同，无法人为干预</li>\n<li>物联网：构建去中心化的数据库，确保数据一致</li>\n</ul>\n<p>参考<a href=\"https://www.fxiaoke.com/crm/information-40755.html\">https://www.fxiaoke.com/crm/information-40755.html</a></p>\n<h2 id=\"2-以太坊\"><a href=\"#2-以太坊\" class=\"headerlink\" title=\"2. 以太坊\"></a>2. 以太坊</h2><p>一种支持智能合约的公共区块链平台，其原生加密货币以太币是全球市值第二高的加密货币，仅次于比特币</p>\n<h2 id=\"3-以太坊账户管理\"><a href=\"#3-以太坊账户管理\" class=\"headerlink\" title=\"3. 以太坊账户管理\"></a>3. 以太坊账户管理</h2><p><a href=\"https://huweihuang.com/blockchain-notes/ethereum/ethereum-account-management.html\">https://huweihuang.com/blockchain-notes/ethereum/ethereum-account-management.html</a></p>\n<p>出现</p>\n<p>ReferenceError: personal is not defined</p>\n<p>​\tat <eval>:1:1(0)</eval></p>\n<p>解决办法：</p>\n<p><a href=\"https://blog.csdn.net/yawei313/article/details/132460948\">https://blog.csdn.net/yawei313/article/details/132460948</a></p>\n"},{"title":"redis知识点","_content":"\nRedis是一个广泛使用的高性能键值数据库，它支持多种数据结构如字符串、哈希、列表、集合、有序集合等。在笔试或面试中，关于Redis的问题可能会覆盖基本概念、数据结构、操作命令、内部机制、持久化、安全性、性能优化等多个方面。下面列举一些可能遇到的Redis笔试题目：\n\n### 1. **Redis基本概念与数据结构**\n\n1. 什么是Redis？它的主要特点是什么？\n2. 描述Redis支持的数据类型及其用途。\n3. Redis如何实现持久化？区别`RDB`和`AOF`持久化方式。\n4. Redis的过期键是如何处理的？\n\n### 2. **操作与命令**\n\n1. 如何在Redis中设置键的过期时间？举例说明。\n2. 解释`LPUSH`和`RPUSH`命令的区别。\n3. `SETNX`命令是做什么的？它如何用于实现分布式锁？\n4. 解释`ZADD`和`ZRANK`命令的作用。\n\n### 3. **内部机制与性能**\n\n1. Redis是单线程模型还是多线程模型？解释它如何处理并发。\n2. Redis的发布订阅模式是什么？它的应用场景有哪些？\n3. Redis事务是如何工作的？`MULTI`、`EXEC`、`WATCH`命令是做什么的？\n4. Redis如何实现高可用性？简述`Redis Sentinel`和`Redis Cluster`的区别。\n\n### 4. **持久化、安全性与优化**\n\n1. 描述Redis的`RDB`持久化过程和触发条件。\n2. 如何优化Redis的内存使用？\n3. Redis安全性问题及其解决方案有哪些？\n4. Redis的主从复制是如何工作的？有哪些同步机制？\n\n### 5. **实际应用与案例分析**\n\n1. 你如何使用Redis实现一个高效的计数器？\n2. 如何利用Redis构建一个简单的限流器？\n3. 分析一个实际场景，如何使用Redis缓存来提高应用性能？\n4. 在分布式系统中，如何使用Redis实现会话共享？\n\n### 准备答案时的建议\n\n- 针对每个问题，尽可能详细地解释概念、原理、命令语法及其使用场景。\n- 准备一些实际的代码示例或命令用例，以展示你如何在实际项目中应用这些知识。\n- 保持对最新Redis版本的了解，以便讨论最新特性和改进。\n\n这些题目只是入门，Redis的应用非常广泛，深入学习和实践可以帮助你在笔试或面试中更加出色。\n\n# 答案：\n\n这些Redis笔试题覆盖了多个方面，下面我会提供一些简洁的答案。由于Redis是一个深入和广泛的话题，这里的答案旨在给出一个基础的了解，更深入的探索和具体实践可能需要查阅官方文档或其他专业资源。\n\n### 1. **Redis基本概念与数据结构**\n\n1. **Redis是什么？**\n   - Redis是一个开源的、基于内存的数据结构存储系统，可以用作数据库、缓存和消息中间件。它支持多种类型的数据结构，如字符串、哈希、列表、集合、有序集合等。主要特点包括高性能、支持持久化、事务和各种原子操作。\n2. **Redis支持的数据类型**\n   - **字符串（Strings）**：可以包含任何数据类型，包括二进制数据，最大可以存储512MB。\n   - **列表（Lists）**：简单的字符串列表，按照插入顺序排序。\n   - **集合（Sets）**：字符串集合，不允许重复的成员。\n   - **有序集合（Sorted Sets）**：不允许重复的成员，并且每个元素都会关联一个浮点数分数，用以排序。\n   - **哈希（Hashes）**：键值对集合，适用于存储对象。\n   - **位图（Bitmaps）\\**和\\**超日志（HyperLogLogs）**：用于特定类型的计数和统计。\n3. **Redis持久化**\n   - **RDB（快照）**：在指定的时间间隔内生成数据集的时间点快照。\n   - **AOF（追加文件）**：记录每个写操作命令，重启时通过重新执行这些命令来恢复数据。\n4. **过期键处理**\n   - Redis使用惰性删除和定期删除策略来处理过期键。只有当访问一个键时，Redis才会检查其是否过期；同时，Redis会定期随机测试一些键，并删除其中的过期键。\n\n### 2. **操作与命令**\n\n1. **设置键的过期时间**\n   - 使用`EXPIRE key seconds`来设置键的过期时间，例如`EXPIRE mykey 120`。\n2. **`LPUSH`与`RPUSH`**\n   - `LPUSH`将一个或多个值插入到列表头部。`RPUSH`将一个或多个值插入到列表尾部。\n3. **`SETNX`命令**\n   - `SETNX`是“SET if Not eXists”的缩写，只有当键不存在时，才对键进行设置操作。它常用于实现分布式锁。\n4. **`ZADD`和`ZRANK`**\n   - `ZADD`向有序集合添加一个或多个成员，`ZRANK`返回有序集合中指定成员的索引。\n\n### 3. **内部机制与性能**\n\n1. **Redis的线程模型**\n   - Redis使用单线程模型来处理命令请求，但它也使用多线程进行某些后台操作，如异步I/O处理、持久化等。\n2. **发布订阅模式**\n   - Redis的发布订阅模式是一种消息通信模式，允许发布者发送消息而不是直接发送给特定的订阅者。订阅者可以订阅感兴趣的频道接收消息。\n3. **Redis事务**\n   - Redis事务通过`MULTI`、`EXEC`、`DISCARD`和`WATCH`命令实现。`MULTI`开始一个事务，`EXEC`执行所有事务块内的命令，`WATCH`为乐观锁提供支持。\n4. **高可用性**\n   - **Redis Sentinel**提供高可用性，自动监控、通知和故障转移。\n   - **Redis Cluster**提供数据自动分片和高可用性，支持多个Redis节点组成的集群。\n\n### 4. **持久化、安全性与优化**\n\n1. **`RDB`持久化过程**\n   - `RDB`持久化通过创建数据集的快照来实现，在指定的时间间隔或满足特定条件时触发。\n2. **优化内存使用**\n   - 使用适当的数据类型，避免大键值对，启用键过期策略，使用内存淘汰策略。\n3. **安全性问题与解决方案**\n   - 通过网络隔离、密码保护、配置文件安全设置等措施提高Redis的安全性。\n4. **主从复制**\n   - 主从复制允许一个或多个从节点复制主节点的数据。它支持数据备份、读写分离和高可用性。\n\n","source":"_posts/redis笔试题.md","raw":"---\ntitle: redis知识点\ntags:\n    - redis\ncategories:\n    - 数据库\n\n---\n\nRedis是一个广泛使用的高性能键值数据库，它支持多种数据结构如字符串、哈希、列表、集合、有序集合等。在笔试或面试中，关于Redis的问题可能会覆盖基本概念、数据结构、操作命令、内部机制、持久化、安全性、性能优化等多个方面。下面列举一些可能遇到的Redis笔试题目：\n\n### 1. **Redis基本概念与数据结构**\n\n1. 什么是Redis？它的主要特点是什么？\n2. 描述Redis支持的数据类型及其用途。\n3. Redis如何实现持久化？区别`RDB`和`AOF`持久化方式。\n4. Redis的过期键是如何处理的？\n\n### 2. **操作与命令**\n\n1. 如何在Redis中设置键的过期时间？举例说明。\n2. 解释`LPUSH`和`RPUSH`命令的区别。\n3. `SETNX`命令是做什么的？它如何用于实现分布式锁？\n4. 解释`ZADD`和`ZRANK`命令的作用。\n\n### 3. **内部机制与性能**\n\n1. Redis是单线程模型还是多线程模型？解释它如何处理并发。\n2. Redis的发布订阅模式是什么？它的应用场景有哪些？\n3. Redis事务是如何工作的？`MULTI`、`EXEC`、`WATCH`命令是做什么的？\n4. Redis如何实现高可用性？简述`Redis Sentinel`和`Redis Cluster`的区别。\n\n### 4. **持久化、安全性与优化**\n\n1. 描述Redis的`RDB`持久化过程和触发条件。\n2. 如何优化Redis的内存使用？\n3. Redis安全性问题及其解决方案有哪些？\n4. Redis的主从复制是如何工作的？有哪些同步机制？\n\n### 5. **实际应用与案例分析**\n\n1. 你如何使用Redis实现一个高效的计数器？\n2. 如何利用Redis构建一个简单的限流器？\n3. 分析一个实际场景，如何使用Redis缓存来提高应用性能？\n4. 在分布式系统中，如何使用Redis实现会话共享？\n\n### 准备答案时的建议\n\n- 针对每个问题，尽可能详细地解释概念、原理、命令语法及其使用场景。\n- 准备一些实际的代码示例或命令用例，以展示你如何在实际项目中应用这些知识。\n- 保持对最新Redis版本的了解，以便讨论最新特性和改进。\n\n这些题目只是入门，Redis的应用非常广泛，深入学习和实践可以帮助你在笔试或面试中更加出色。\n\n# 答案：\n\n这些Redis笔试题覆盖了多个方面，下面我会提供一些简洁的答案。由于Redis是一个深入和广泛的话题，这里的答案旨在给出一个基础的了解，更深入的探索和具体实践可能需要查阅官方文档或其他专业资源。\n\n### 1. **Redis基本概念与数据结构**\n\n1. **Redis是什么？**\n   - Redis是一个开源的、基于内存的数据结构存储系统，可以用作数据库、缓存和消息中间件。它支持多种类型的数据结构，如字符串、哈希、列表、集合、有序集合等。主要特点包括高性能、支持持久化、事务和各种原子操作。\n2. **Redis支持的数据类型**\n   - **字符串（Strings）**：可以包含任何数据类型，包括二进制数据，最大可以存储512MB。\n   - **列表（Lists）**：简单的字符串列表，按照插入顺序排序。\n   - **集合（Sets）**：字符串集合，不允许重复的成员。\n   - **有序集合（Sorted Sets）**：不允许重复的成员，并且每个元素都会关联一个浮点数分数，用以排序。\n   - **哈希（Hashes）**：键值对集合，适用于存储对象。\n   - **位图（Bitmaps）\\**和\\**超日志（HyperLogLogs）**：用于特定类型的计数和统计。\n3. **Redis持久化**\n   - **RDB（快照）**：在指定的时间间隔内生成数据集的时间点快照。\n   - **AOF（追加文件）**：记录每个写操作命令，重启时通过重新执行这些命令来恢复数据。\n4. **过期键处理**\n   - Redis使用惰性删除和定期删除策略来处理过期键。只有当访问一个键时，Redis才会检查其是否过期；同时，Redis会定期随机测试一些键，并删除其中的过期键。\n\n### 2. **操作与命令**\n\n1. **设置键的过期时间**\n   - 使用`EXPIRE key seconds`来设置键的过期时间，例如`EXPIRE mykey 120`。\n2. **`LPUSH`与`RPUSH`**\n   - `LPUSH`将一个或多个值插入到列表头部。`RPUSH`将一个或多个值插入到列表尾部。\n3. **`SETNX`命令**\n   - `SETNX`是“SET if Not eXists”的缩写，只有当键不存在时，才对键进行设置操作。它常用于实现分布式锁。\n4. **`ZADD`和`ZRANK`**\n   - `ZADD`向有序集合添加一个或多个成员，`ZRANK`返回有序集合中指定成员的索引。\n\n### 3. **内部机制与性能**\n\n1. **Redis的线程模型**\n   - Redis使用单线程模型来处理命令请求，但它也使用多线程进行某些后台操作，如异步I/O处理、持久化等。\n2. **发布订阅模式**\n   - Redis的发布订阅模式是一种消息通信模式，允许发布者发送消息而不是直接发送给特定的订阅者。订阅者可以订阅感兴趣的频道接收消息。\n3. **Redis事务**\n   - Redis事务通过`MULTI`、`EXEC`、`DISCARD`和`WATCH`命令实现。`MULTI`开始一个事务，`EXEC`执行所有事务块内的命令，`WATCH`为乐观锁提供支持。\n4. **高可用性**\n   - **Redis Sentinel**提供高可用性，自动监控、通知和故障转移。\n   - **Redis Cluster**提供数据自动分片和高可用性，支持多个Redis节点组成的集群。\n\n### 4. **持久化、安全性与优化**\n\n1. **`RDB`持久化过程**\n   - `RDB`持久化通过创建数据集的快照来实现，在指定的时间间隔或满足特定条件时触发。\n2. **优化内存使用**\n   - 使用适当的数据类型，避免大键值对，启用键过期策略，使用内存淘汰策略。\n3. **安全性问题与解决方案**\n   - 通过网络隔离、密码保护、配置文件安全设置等措施提高Redis的安全性。\n4. **主从复制**\n   - 主从复制允许一个或多个从节点复制主节点的数据。它支持数据备份、读写分离和高可用性。\n\n","slug":"redis笔试题","published":1,"date":"2024-02-23T10:21:53.302Z","updated":"2024-02-24T09:42:33.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltcs7hwi000rkjnn24kcfldu","content":"<p>Redis是一个广泛使用的高性能键值数据库，它支持多种数据结构如字符串、哈希、列表、集合、有序集合等。在笔试或面试中，关于Redis的问题可能会覆盖基本概念、数据结构、操作命令、内部机制、持久化、安全性、性能优化等多个方面。下面列举一些可能遇到的Redis笔试题目：</p>\n<h3 id=\"1-Redis基本概念与数据结构\"><a href=\"#1-Redis基本概念与数据结构\" class=\"headerlink\" title=\"1. Redis基本概念与数据结构\"></a>1. <strong>Redis基本概念与数据结构</strong></h3><ol>\n<li>什么是Redis？它的主要特点是什么？</li>\n<li>描述Redis支持的数据类型及其用途。</li>\n<li>Redis如何实现持久化？区别<code>RDB</code>和<code>AOF</code>持久化方式。</li>\n<li>Redis的过期键是如何处理的？</li>\n</ol>\n<h3 id=\"2-操作与命令\"><a href=\"#2-操作与命令\" class=\"headerlink\" title=\"2. 操作与命令\"></a>2. <strong>操作与命令</strong></h3><ol>\n<li>如何在Redis中设置键的过期时间？举例说明。</li>\n<li>解释<code>LPUSH</code>和<code>RPUSH</code>命令的区别。</li>\n<li><code>SETNX</code>命令是做什么的？它如何用于实现分布式锁？</li>\n<li>解释<code>ZADD</code>和<code>ZRANK</code>命令的作用。</li>\n</ol>\n<h3 id=\"3-内部机制与性能\"><a href=\"#3-内部机制与性能\" class=\"headerlink\" title=\"3. 内部机制与性能\"></a>3. <strong>内部机制与性能</strong></h3><ol>\n<li>Redis是单线程模型还是多线程模型？解释它如何处理并发。</li>\n<li>Redis的发布订阅模式是什么？它的应用场景有哪些？</li>\n<li>Redis事务是如何工作的？<code>MULTI</code>、<code>EXEC</code>、<code>WATCH</code>命令是做什么的？</li>\n<li>Redis如何实现高可用性？简述<code>Redis Sentinel</code>和<code>Redis Cluster</code>的区别。</li>\n</ol>\n<h3 id=\"4-持久化、安全性与优化\"><a href=\"#4-持久化、安全性与优化\" class=\"headerlink\" title=\"4. 持久化、安全性与优化\"></a>4. <strong>持久化、安全性与优化</strong></h3><ol>\n<li>描述Redis的<code>RDB</code>持久化过程和触发条件。</li>\n<li>如何优化Redis的内存使用？</li>\n<li>Redis安全性问题及其解决方案有哪些？</li>\n<li>Redis的主从复制是如何工作的？有哪些同步机制？</li>\n</ol>\n<h3 id=\"5-实际应用与案例分析\"><a href=\"#5-实际应用与案例分析\" class=\"headerlink\" title=\"5. 实际应用与案例分析\"></a>5. <strong>实际应用与案例分析</strong></h3><ol>\n<li>你如何使用Redis实现一个高效的计数器？</li>\n<li>如何利用Redis构建一个简单的限流器？</li>\n<li>分析一个实际场景，如何使用Redis缓存来提高应用性能？</li>\n<li>在分布式系统中，如何使用Redis实现会话共享？</li>\n</ol>\n<h3 id=\"准备答案时的建议\"><a href=\"#准备答案时的建议\" class=\"headerlink\" title=\"准备答案时的建议\"></a>准备答案时的建议</h3><ul>\n<li>针对每个问题，尽可能详细地解释概念、原理、命令语法及其使用场景。</li>\n<li>准备一些实际的代码示例或命令用例，以展示你如何在实际项目中应用这些知识。</li>\n<li>保持对最新Redis版本的了解，以便讨论最新特性和改进。</li>\n</ul>\n<p>这些题目只是入门，Redis的应用非常广泛，深入学习和实践可以帮助你在笔试或面试中更加出色。</p>\n<h1 id=\"答案：\"><a href=\"#答案：\" class=\"headerlink\" title=\"答案：\"></a>答案：</h1><p>这些Redis笔试题覆盖了多个方面，下面我会提供一些简洁的答案。由于Redis是一个深入和广泛的话题，这里的答案旨在给出一个基础的了解，更深入的探索和具体实践可能需要查阅官方文档或其他专业资源。</p>\n<h3 id=\"1-Redis基本概念与数据结构-1\"><a href=\"#1-Redis基本概念与数据结构-1\" class=\"headerlink\" title=\"1. Redis基本概念与数据结构\"></a>1. <strong>Redis基本概念与数据结构</strong></h3><ol>\n<li><strong>Redis是什么？</strong><ul>\n<li>Redis是一个开源的、基于内存的数据结构存储系统，可以用作数据库、缓存和消息中间件。它支持多种类型的数据结构，如字符串、哈希、列表、集合、有序集合等。主要特点包括高性能、支持持久化、事务和各种原子操作。</li>\n</ul>\n</li>\n<li><strong>Redis支持的数据类型</strong><ul>\n<li><strong>字符串（Strings）</strong>：可以包含任何数据类型，包括二进制数据，最大可以存储512MB。</li>\n<li><strong>列表（Lists）</strong>：简单的字符串列表，按照插入顺序排序。</li>\n<li><strong>集合（Sets）</strong>：字符串集合，不允许重复的成员。</li>\n<li><strong>有序集合（Sorted Sets）</strong>：不允许重复的成员，并且每个元素都会关联一个浮点数分数，用以排序。</li>\n<li><strong>哈希（Hashes）</strong>：键值对集合，适用于存储对象。</li>\n<li>**位图（Bitmaps）**和**超日志（HyperLogLogs）**：用于特定类型的计数和统计。</li>\n</ul>\n</li>\n<li><strong>Redis持久化</strong><ul>\n<li><strong>RDB（快照）</strong>：在指定的时间间隔内生成数据集的时间点快照。</li>\n<li><strong>AOF（追加文件）</strong>：记录每个写操作命令，重启时通过重新执行这些命令来恢复数据。</li>\n</ul>\n</li>\n<li><strong>过期键处理</strong><ul>\n<li>Redis使用惰性删除和定期删除策略来处理过期键。只有当访问一个键时，Redis才会检查其是否过期；同时，Redis会定期随机测试一些键，并删除其中的过期键。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-操作与命令-1\"><a href=\"#2-操作与命令-1\" class=\"headerlink\" title=\"2. 操作与命令\"></a>2. <strong>操作与命令</strong></h3><ol>\n<li><strong>设置键的过期时间</strong><ul>\n<li>使用<code>EXPIRE key seconds</code>来设置键的过期时间，例如<code>EXPIRE mykey 120</code>。</li>\n</ul>\n</li>\n<li><strong><code>LPUSH</code>与<code>RPUSH</code></strong><ul>\n<li><code>LPUSH</code>将一个或多个值插入到列表头部。<code>RPUSH</code>将一个或多个值插入到列表尾部。</li>\n</ul>\n</li>\n<li><strong><code>SETNX</code>命令</strong><ul>\n<li><code>SETNX</code>是“SET if Not eXists”的缩写，只有当键不存在时，才对键进行设置操作。它常用于实现分布式锁。</li>\n</ul>\n</li>\n<li><strong><code>ZADD</code>和<code>ZRANK</code></strong><ul>\n<li><code>ZADD</code>向有序集合添加一个或多个成员，<code>ZRANK</code>返回有序集合中指定成员的索引。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-内部机制与性能-1\"><a href=\"#3-内部机制与性能-1\" class=\"headerlink\" title=\"3. 内部机制与性能\"></a>3. <strong>内部机制与性能</strong></h3><ol>\n<li><strong>Redis的线程模型</strong><ul>\n<li>Redis使用单线程模型来处理命令请求，但它也使用多线程进行某些后台操作，如异步I&#x2F;O处理、持久化等。</li>\n</ul>\n</li>\n<li><strong>发布订阅模式</strong><ul>\n<li>Redis的发布订阅模式是一种消息通信模式，允许发布者发送消息而不是直接发送给特定的订阅者。订阅者可以订阅感兴趣的频道接收消息。</li>\n</ul>\n</li>\n<li><strong>Redis事务</strong><ul>\n<li>Redis事务通过<code>MULTI</code>、<code>EXEC</code>、<code>DISCARD</code>和<code>WATCH</code>命令实现。<code>MULTI</code>开始一个事务，<code>EXEC</code>执行所有事务块内的命令，<code>WATCH</code>为乐观锁提供支持。</li>\n</ul>\n</li>\n<li><strong>高可用性</strong><ul>\n<li><strong>Redis Sentinel</strong>提供高可用性，自动监控、通知和故障转移。</li>\n<li><strong>Redis Cluster</strong>提供数据自动分片和高可用性，支持多个Redis节点组成的集群。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4-持久化、安全性与优化-1\"><a href=\"#4-持久化、安全性与优化-1\" class=\"headerlink\" title=\"4. 持久化、安全性与优化\"></a>4. <strong>持久化、安全性与优化</strong></h3><ol>\n<li><strong><code>RDB</code>持久化过程</strong><ul>\n<li><code>RDB</code>持久化通过创建数据集的快照来实现，在指定的时间间隔或满足特定条件时触发。</li>\n</ul>\n</li>\n<li><strong>优化内存使用</strong><ul>\n<li>使用适当的数据类型，避免大键值对，启用键过期策略，使用内存淘汰策略。</li>\n</ul>\n</li>\n<li><strong>安全性问题与解决方案</strong><ul>\n<li>通过网络隔离、密码保护、配置文件安全设置等措施提高Redis的安全性。</li>\n</ul>\n</li>\n<li><strong>主从复制</strong><ul>\n<li>主从复制允许一个或多个从节点复制主节点的数据。它支持数据备份、读写分离和高可用性。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>Redis是一个广泛使用的高性能键值数据库，它支持多种数据结构如字符串、哈希、列表、集合、有序集合等。在笔试或面试中，关于Redis的问题可能会覆盖基本概念、数据结构、操作命令、内部机制、持久化、安全性、性能优化等多个方面。下面列举一些可能遇到的Redis笔试题目：</p>\n<h3 id=\"1-Redis基本概念与数据结构\"><a href=\"#1-Redis基本概念与数据结构\" class=\"headerlink\" title=\"1. Redis基本概念与数据结构\"></a>1. <strong>Redis基本概念与数据结构</strong></h3><ol>\n<li>什么是Redis？它的主要特点是什么？</li>\n<li>描述Redis支持的数据类型及其用途。</li>\n<li>Redis如何实现持久化？区别<code>RDB</code>和<code>AOF</code>持久化方式。</li>\n<li>Redis的过期键是如何处理的？</li>\n</ol>\n<h3 id=\"2-操作与命令\"><a href=\"#2-操作与命令\" class=\"headerlink\" title=\"2. 操作与命令\"></a>2. <strong>操作与命令</strong></h3><ol>\n<li>如何在Redis中设置键的过期时间？举例说明。</li>\n<li>解释<code>LPUSH</code>和<code>RPUSH</code>命令的区别。</li>\n<li><code>SETNX</code>命令是做什么的？它如何用于实现分布式锁？</li>\n<li>解释<code>ZADD</code>和<code>ZRANK</code>命令的作用。</li>\n</ol>\n<h3 id=\"3-内部机制与性能\"><a href=\"#3-内部机制与性能\" class=\"headerlink\" title=\"3. 内部机制与性能\"></a>3. <strong>内部机制与性能</strong></h3><ol>\n<li>Redis是单线程模型还是多线程模型？解释它如何处理并发。</li>\n<li>Redis的发布订阅模式是什么？它的应用场景有哪些？</li>\n<li>Redis事务是如何工作的？<code>MULTI</code>、<code>EXEC</code>、<code>WATCH</code>命令是做什么的？</li>\n<li>Redis如何实现高可用性？简述<code>Redis Sentinel</code>和<code>Redis Cluster</code>的区别。</li>\n</ol>\n<h3 id=\"4-持久化、安全性与优化\"><a href=\"#4-持久化、安全性与优化\" class=\"headerlink\" title=\"4. 持久化、安全性与优化\"></a>4. <strong>持久化、安全性与优化</strong></h3><ol>\n<li>描述Redis的<code>RDB</code>持久化过程和触发条件。</li>\n<li>如何优化Redis的内存使用？</li>\n<li>Redis安全性问题及其解决方案有哪些？</li>\n<li>Redis的主从复制是如何工作的？有哪些同步机制？</li>\n</ol>\n<h3 id=\"5-实际应用与案例分析\"><a href=\"#5-实际应用与案例分析\" class=\"headerlink\" title=\"5. 实际应用与案例分析\"></a>5. <strong>实际应用与案例分析</strong></h3><ol>\n<li>你如何使用Redis实现一个高效的计数器？</li>\n<li>如何利用Redis构建一个简单的限流器？</li>\n<li>分析一个实际场景，如何使用Redis缓存来提高应用性能？</li>\n<li>在分布式系统中，如何使用Redis实现会话共享？</li>\n</ol>\n<h3 id=\"准备答案时的建议\"><a href=\"#准备答案时的建议\" class=\"headerlink\" title=\"准备答案时的建议\"></a>准备答案时的建议</h3><ul>\n<li>针对每个问题，尽可能详细地解释概念、原理、命令语法及其使用场景。</li>\n<li>准备一些实际的代码示例或命令用例，以展示你如何在实际项目中应用这些知识。</li>\n<li>保持对最新Redis版本的了解，以便讨论最新特性和改进。</li>\n</ul>\n<p>这些题目只是入门，Redis的应用非常广泛，深入学习和实践可以帮助你在笔试或面试中更加出色。</p>\n<h1 id=\"答案：\"><a href=\"#答案：\" class=\"headerlink\" title=\"答案：\"></a>答案：</h1><p>这些Redis笔试题覆盖了多个方面，下面我会提供一些简洁的答案。由于Redis是一个深入和广泛的话题，这里的答案旨在给出一个基础的了解，更深入的探索和具体实践可能需要查阅官方文档或其他专业资源。</p>\n<h3 id=\"1-Redis基本概念与数据结构-1\"><a href=\"#1-Redis基本概念与数据结构-1\" class=\"headerlink\" title=\"1. Redis基本概念与数据结构\"></a>1. <strong>Redis基本概念与数据结构</strong></h3><ol>\n<li><strong>Redis是什么？</strong><ul>\n<li>Redis是一个开源的、基于内存的数据结构存储系统，可以用作数据库、缓存和消息中间件。它支持多种类型的数据结构，如字符串、哈希、列表、集合、有序集合等。主要特点包括高性能、支持持久化、事务和各种原子操作。</li>\n</ul>\n</li>\n<li><strong>Redis支持的数据类型</strong><ul>\n<li><strong>字符串（Strings）</strong>：可以包含任何数据类型，包括二进制数据，最大可以存储512MB。</li>\n<li><strong>列表（Lists）</strong>：简单的字符串列表，按照插入顺序排序。</li>\n<li><strong>集合（Sets）</strong>：字符串集合，不允许重复的成员。</li>\n<li><strong>有序集合（Sorted Sets）</strong>：不允许重复的成员，并且每个元素都会关联一个浮点数分数，用以排序。</li>\n<li><strong>哈希（Hashes）</strong>：键值对集合，适用于存储对象。</li>\n<li>**位图（Bitmaps）**和**超日志（HyperLogLogs）**：用于特定类型的计数和统计。</li>\n</ul>\n</li>\n<li><strong>Redis持久化</strong><ul>\n<li><strong>RDB（快照）</strong>：在指定的时间间隔内生成数据集的时间点快照。</li>\n<li><strong>AOF（追加文件）</strong>：记录每个写操作命令，重启时通过重新执行这些命令来恢复数据。</li>\n</ul>\n</li>\n<li><strong>过期键处理</strong><ul>\n<li>Redis使用惰性删除和定期删除策略来处理过期键。只有当访问一个键时，Redis才会检查其是否过期；同时，Redis会定期随机测试一些键，并删除其中的过期键。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2-操作与命令-1\"><a href=\"#2-操作与命令-1\" class=\"headerlink\" title=\"2. 操作与命令\"></a>2. <strong>操作与命令</strong></h3><ol>\n<li><strong>设置键的过期时间</strong><ul>\n<li>使用<code>EXPIRE key seconds</code>来设置键的过期时间，例如<code>EXPIRE mykey 120</code>。</li>\n</ul>\n</li>\n<li><strong><code>LPUSH</code>与<code>RPUSH</code></strong><ul>\n<li><code>LPUSH</code>将一个或多个值插入到列表头部。<code>RPUSH</code>将一个或多个值插入到列表尾部。</li>\n</ul>\n</li>\n<li><strong><code>SETNX</code>命令</strong><ul>\n<li><code>SETNX</code>是“SET if Not eXists”的缩写，只有当键不存在时，才对键进行设置操作。它常用于实现分布式锁。</li>\n</ul>\n</li>\n<li><strong><code>ZADD</code>和<code>ZRANK</code></strong><ul>\n<li><code>ZADD</code>向有序集合添加一个或多个成员，<code>ZRANK</code>返回有序集合中指定成员的索引。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"3-内部机制与性能-1\"><a href=\"#3-内部机制与性能-1\" class=\"headerlink\" title=\"3. 内部机制与性能\"></a>3. <strong>内部机制与性能</strong></h3><ol>\n<li><strong>Redis的线程模型</strong><ul>\n<li>Redis使用单线程模型来处理命令请求，但它也使用多线程进行某些后台操作，如异步I&#x2F;O处理、持久化等。</li>\n</ul>\n</li>\n<li><strong>发布订阅模式</strong><ul>\n<li>Redis的发布订阅模式是一种消息通信模式，允许发布者发送消息而不是直接发送给特定的订阅者。订阅者可以订阅感兴趣的频道接收消息。</li>\n</ul>\n</li>\n<li><strong>Redis事务</strong><ul>\n<li>Redis事务通过<code>MULTI</code>、<code>EXEC</code>、<code>DISCARD</code>和<code>WATCH</code>命令实现。<code>MULTI</code>开始一个事务，<code>EXEC</code>执行所有事务块内的命令，<code>WATCH</code>为乐观锁提供支持。</li>\n</ul>\n</li>\n<li><strong>高可用性</strong><ul>\n<li><strong>Redis Sentinel</strong>提供高可用性，自动监控、通知和故障转移。</li>\n<li><strong>Redis Cluster</strong>提供数据自动分片和高可用性，支持多个Redis节点组成的集群。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"4-持久化、安全性与优化-1\"><a href=\"#4-持久化、安全性与优化-1\" class=\"headerlink\" title=\"4. 持久化、安全性与优化\"></a>4. <strong>持久化、安全性与优化</strong></h3><ol>\n<li><strong><code>RDB</code>持久化过程</strong><ul>\n<li><code>RDB</code>持久化通过创建数据集的快照来实现，在指定的时间间隔或满足特定条件时触发。</li>\n</ul>\n</li>\n<li><strong>优化内存使用</strong><ul>\n<li>使用适当的数据类型，避免大键值对，启用键过期策略，使用内存淘汰策略。</li>\n</ul>\n</li>\n<li><strong>安全性问题与解决方案</strong><ul>\n<li>通过网络隔离、密码保护、配置文件安全设置等措施提高Redis的安全性。</li>\n</ul>\n</li>\n<li><strong>主从复制</strong><ul>\n<li>主从复制允许一个或多个从节点复制主节点的数据。它支持数据备份、读写分离和高可用性。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"使用hexo搭建个人博客","mathjax":true,"_content":"\n先安装nodejs\n\nnode -v\t#查看node版本\nnpm -v\t#查看npm版本\nnpm install -g cnpm --registry=http://registry.npmmirror.com\t#安装淘宝的cnpm 管理器\ncnpm -v\t#查看cnpm版本\ncnpm install -g hexo-cli    #安装hexo框架\nhexo -v\t#查看hexo版本\nmkdir blog\t#创建blog目录\ncd blog\t #进入blog目录\nsudo hexo init \t#生成博客 初始化博客\nhexo s\t#启动本地博客服务\nhttp://localhost:4000/\t#本地访问地址\nhexo n \"我的第一篇文章\" #创建新的文章 \n\\#返回blog目录\nhexo clean #清理\nhexo g #生成\n\\#Github创建一个新的仓库 YourGithubName.github.io\ncnpm install --save hexo-deployer-git #在blog目录下安装git部署插件\n\\----\n\\#配置_config.yml \n\n```code\n\t# Deployment\n\t## Docs: https://hexo.io/docs/deployment.html\n\tdeploy:\n  \t\ttype: git\n \t\t  repo: https://github.com/bigbelly-drunkard/bigbelly-drunkard.github.io.git\n  \t\tbranch: master\n```\n\nhexo d\t#部署到Github仓库里\n\n走到这一步报错：\n\n```code\nError: Spawn failed\n  at ChildProcess.<anonymous> (/Users/lin/blog/node_modules/.store/hexo-util@2.7.0/node_modules/hexo-util/lib/spawn.js:51:21)\n  at ChildProcess.emit (node:events:518:28)\n  at ChildProcess._handle.onexit (node:internal/child_process:294:12)\n```\n\n将repo换成gitee，发现没有报错，初步鉴定为网络问题，忧郁gitee白嫖域名需要备案，太麻烦了，还是用github把。\n\n试了好久终于找到解决方法，将https链接改为ssh连接，参考：https://github.com/hexojs/hexo/issues/2778\n\n![picture1](2024/02/23/使用hexo搭建个人博客/picture1.png)\n\n配置_config.yml ，将repo改为ssh链接\n\n```code\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\n\tdeploy:\n  \ttype: git\n \t\trepo: git@github.com:bigbelly-drunkard/bigbelly-drunkard.github.io.git\n  \tbranch: master\n```\n\n本地生成ssh公钥\n\nssh-keygen -t rsa -b 4096 -C \"你的github邮箱\"\n\n一路点确定\n\n生成的公钥默认存在/var/root/.ssh/id_rsa下，将id_rsa.pub的内容拷贝的github上，点击Deploy keys >> Add deploy key：![picture2](2024/02/23/使用hexo搭建个人博客/picture2.png)\n\nHero d 部署博客，成功\n\nhttps://YourGithubName.github.io/  #访问这个地址可以查看博客\n\n\\#修改hexo根目录下的 _config.yml 文件 ： theme: yilia\n\nhexo c\t#清理一下\nhexo g\t#生成\nhexo d\t#部署到远程Github仓库\nhttps://YourGithubName.github.io/  #查看博客\n\n\n\nhexo无法显示图片解决方法：\n\nhttps://blog.csdn.net/weixin_44999716/article/details/112401495\n\n","source":"_posts/使用hexo搭建个人博客.md","raw":"---\ntitle: 使用hexo搭建个人博客\nmathjax: true\ntags:\n    - hexo\n    - 个人博客\ncategories:\n    - hexo\n\n---\n\n先安装nodejs\n\nnode -v\t#查看node版本\nnpm -v\t#查看npm版本\nnpm install -g cnpm --registry=http://registry.npmmirror.com\t#安装淘宝的cnpm 管理器\ncnpm -v\t#查看cnpm版本\ncnpm install -g hexo-cli    #安装hexo框架\nhexo -v\t#查看hexo版本\nmkdir blog\t#创建blog目录\ncd blog\t #进入blog目录\nsudo hexo init \t#生成博客 初始化博客\nhexo s\t#启动本地博客服务\nhttp://localhost:4000/\t#本地访问地址\nhexo n \"我的第一篇文章\" #创建新的文章 \n\\#返回blog目录\nhexo clean #清理\nhexo g #生成\n\\#Github创建一个新的仓库 YourGithubName.github.io\ncnpm install --save hexo-deployer-git #在blog目录下安装git部署插件\n\\----\n\\#配置_config.yml \n\n```code\n\t# Deployment\n\t## Docs: https://hexo.io/docs/deployment.html\n\tdeploy:\n  \t\ttype: git\n \t\t  repo: https://github.com/bigbelly-drunkard/bigbelly-drunkard.github.io.git\n  \t\tbranch: master\n```\n\nhexo d\t#部署到Github仓库里\n\n走到这一步报错：\n\n```code\nError: Spawn failed\n  at ChildProcess.<anonymous> (/Users/lin/blog/node_modules/.store/hexo-util@2.7.0/node_modules/hexo-util/lib/spawn.js:51:21)\n  at ChildProcess.emit (node:events:518:28)\n  at ChildProcess._handle.onexit (node:internal/child_process:294:12)\n```\n\n将repo换成gitee，发现没有报错，初步鉴定为网络问题，忧郁gitee白嫖域名需要备案，太麻烦了，还是用github把。\n\n试了好久终于找到解决方法，将https链接改为ssh连接，参考：https://github.com/hexojs/hexo/issues/2778\n\n![picture1](2024/02/23/使用hexo搭建个人博客/picture1.png)\n\n配置_config.yml ，将repo改为ssh链接\n\n```code\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\n\tdeploy:\n  \ttype: git\n \t\trepo: git@github.com:bigbelly-drunkard/bigbelly-drunkard.github.io.git\n  \tbranch: master\n```\n\n本地生成ssh公钥\n\nssh-keygen -t rsa -b 4096 -C \"你的github邮箱\"\n\n一路点确定\n\n生成的公钥默认存在/var/root/.ssh/id_rsa下，将id_rsa.pub的内容拷贝的github上，点击Deploy keys >> Add deploy key：![picture2](2024/02/23/使用hexo搭建个人博客/picture2.png)\n\nHero d 部署博客，成功\n\nhttps://YourGithubName.github.io/  #访问这个地址可以查看博客\n\n\\#修改hexo根目录下的 _config.yml 文件 ： theme: yilia\n\nhexo c\t#清理一下\nhexo g\t#生成\nhexo d\t#部署到远程Github仓库\nhttps://YourGithubName.github.io/  #查看博客\n\n\n\nhexo无法显示图片解决方法：\n\nhttps://blog.csdn.net/weixin_44999716/article/details/112401495\n\n","slug":"使用hexo搭建个人博客","published":1,"date":"2024-02-23T10:21:53.300Z","updated":"2024-02-24T10:26:49.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltcs7hwj000skjnn9wf53xrf","content":"<p>先安装nodejs</p>\n<p>node -v\t#查看node版本<br>npm -v\t#查看npm版本<br>npm install -g cnpm –registry&#x3D;<a href=\"http://registry.npmmirror.com/\">http://registry.npmmirror.com</a>\t#安装淘宝的cnpm 管理器<br>cnpm -v\t#查看cnpm版本<br>cnpm install -g hexo-cli    #安装hexo框架<br>hexo -v\t#查看hexo版本<br>mkdir blog\t#创建blog目录<br>cd blog\t #进入blog目录<br>sudo hexo init \t#生成博客 初始化博客<br>hexo s\t#启动本地博客服务<br><a href=\"http://localhost:4000/\">http://localhost:4000/</a>\t#本地访问地址<br>hexo n “我的第一篇文章” #创建新的文章<br>#返回blog目录<br>hexo clean #清理<br>hexo g #生成<br>#Github创建一个新的仓库 YourGithubName.github.io<br>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件<br>-—<br>#配置_config.yml </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\"> \t\ttype: git</span><br><span class=\"line\">\t\t  repo: https://github.com/bigbelly-drunkard/bigbelly-drunkard.github.io.git</span><br><span class=\"line\"> \t\tbranch: master</span><br></pre></td></tr></table></figure>\n\n<p>hexo d\t#部署到Github仓库里</p>\n<p>走到这一步报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Spawn failed</span><br><span class=\"line\">  at ChildProcess.&lt;anonymous&gt; (/Users/lin/blog/node_modules/.store/hexo-util@2.7.0/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class=\"line\">  at ChildProcess.emit (node:events:518:28)</span><br><span class=\"line\">  at ChildProcess._handle.onexit (node:internal/child_process:294:12)</span><br></pre></td></tr></table></figure>\n\n<p>将repo换成gitee，发现没有报错，初步鉴定为网络问题，忧郁gitee白嫖域名需要备案，太麻烦了，还是用github把。</p>\n<p>试了好久终于找到解决方法，将https链接改为ssh连接，参考：<a href=\"https://github.com/hexojs/hexo/issues/2778\">https://github.com/hexojs/hexo/issues/2778</a></p>\n<p><img src=\"/2024/02/23/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/picture1.png\" alt=\"picture1\"></p>\n<p>配置_config.yml ，将repo改为ssh链接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">\tdeploy:</span><br><span class=\"line\">  \ttype: git</span><br><span class=\"line\"> \t\trepo: git@github.com:bigbelly-drunkard/bigbelly-drunkard.github.io.git</span><br><span class=\"line\">  \tbranch: master</span><br></pre></td></tr></table></figure>\n\n<p>本地生成ssh公钥</p>\n<p>ssh-keygen -t rsa -b 4096 -C “你的github邮箱”</p>\n<p>一路点确定</p>\n<p>生成的公钥默认存在&#x2F;var&#x2F;root&#x2F;.ssh&#x2F;id_rsa下，将id_rsa.pub的内容拷贝的github上，点击Deploy keys &gt;&gt; Add deploy key：<img src=\"/2024/02/23/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/picture2.png\" alt=\"picture2\"></p>\n<p>Hero d 部署博客，成功</p>\n<p><a href=\"https://yourgithubname.github.io/\">https://YourGithubName.github.io/</a>  #访问这个地址可以查看博客</p>\n<p>#修改hexo根目录下的 _config.yml 文件 ： theme: yilia</p>\n<p>hexo c\t#清理一下<br>hexo g\t#生成<br>hexo d\t#部署到远程Github仓库<br><a href=\"https://yourgithubname.github.io/\">https://YourGithubName.github.io/</a>  #查看博客</p>\n<p>hexo无法显示图片解决方法：</p>\n<p><a href=\"https://blog.csdn.net/weixin_44999716/article/details/112401495\">https://blog.csdn.net/weixin_44999716/article/details/112401495</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>先安装nodejs</p>\n<p>node -v\t#查看node版本<br>npm -v\t#查看npm版本<br>npm install -g cnpm –registry&#x3D;<a href=\"http://registry.npmmirror.com/\">http://registry.npmmirror.com</a>\t#安装淘宝的cnpm 管理器<br>cnpm -v\t#查看cnpm版本<br>cnpm install -g hexo-cli    #安装hexo框架<br>hexo -v\t#查看hexo版本<br>mkdir blog\t#创建blog目录<br>cd blog\t #进入blog目录<br>sudo hexo init \t#生成博客 初始化博客<br>hexo s\t#启动本地博客服务<br><a href=\"http://localhost:4000/\">http://localhost:4000/</a>\t#本地访问地址<br>hexo n “我的第一篇文章” #创建新的文章<br>#返回blog目录<br>hexo clean #清理<br>hexo g #生成<br>#Github创建一个新的仓库 YourGithubName.github.io<br>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件<br>-—<br>#配置_config.yml </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\"> \t\ttype: git</span><br><span class=\"line\">\t\t  repo: https://github.com/bigbelly-drunkard/bigbelly-drunkard.github.io.git</span><br><span class=\"line\"> \t\tbranch: master</span><br></pre></td></tr></table></figure>\n\n<p>hexo d\t#部署到Github仓库里</p>\n<p>走到这一步报错：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Spawn failed</span><br><span class=\"line\">  at ChildProcess.&lt;anonymous&gt; (/Users/lin/blog/node_modules/.store/hexo-util@2.7.0/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class=\"line\">  at ChildProcess.emit (node:events:518:28)</span><br><span class=\"line\">  at ChildProcess._handle.onexit (node:internal/child_process:294:12)</span><br></pre></td></tr></table></figure>\n\n<p>将repo换成gitee，发现没有报错，初步鉴定为网络问题，忧郁gitee白嫖域名需要备案，太麻烦了，还是用github把。</p>\n<p>试了好久终于找到解决方法，将https链接改为ssh连接，参考：<a href=\"https://github.com/hexojs/hexo/issues/2778\">https://github.com/hexojs/hexo/issues/2778</a></p>\n<p><img src=\"/2024/02/23/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/picture1.png\" alt=\"picture1\"></p>\n<p>配置_config.yml ，将repo改为ssh链接</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">\tdeploy:</span><br><span class=\"line\">  \ttype: git</span><br><span class=\"line\"> \t\trepo: git@github.com:bigbelly-drunkard/bigbelly-drunkard.github.io.git</span><br><span class=\"line\">  \tbranch: master</span><br></pre></td></tr></table></figure>\n\n<p>本地生成ssh公钥</p>\n<p>ssh-keygen -t rsa -b 4096 -C “你的github邮箱”</p>\n<p>一路点确定</p>\n<p>生成的公钥默认存在&#x2F;var&#x2F;root&#x2F;.ssh&#x2F;id_rsa下，将id_rsa.pub的内容拷贝的github上，点击Deploy keys &gt;&gt; Add deploy key：<img src=\"/2024/02/23/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/picture2.png\" alt=\"picture2\"></p>\n<p>Hero d 部署博客，成功</p>\n<p><a href=\"https://yourgithubname.github.io/\">https://YourGithubName.github.io/</a>  #访问这个地址可以查看博客</p>\n<p>#修改hexo根目录下的 _config.yml 文件 ： theme: yilia</p>\n<p>hexo c\t#清理一下<br>hexo g\t#生成<br>hexo d\t#部署到远程Github仓库<br><a href=\"https://yourgithubname.github.io/\">https://YourGithubName.github.io/</a>  #查看博客</p>\n<p>hexo无法显示图片解决方法：</p>\n<p><a href=\"https://blog.csdn.net/weixin_44999716/article/details/112401495\">https://blog.csdn.net/weixin_44999716/article/details/112401495</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/使用hexo搭建个人博客/picture1.png","post":"cltcs7hwj000skjnn9wf53xrf","slug":"picture1.png","modified":1,"renderable":1},{"_id":"source/_posts/使用hexo搭建个人博客/picture2.png","post":"cltcs7hwj000skjnn9wf53xrf","slug":"picture2.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cltcs7hwd0001kjnn0bir3tgb","category_id":"cltcs7hwf0003kjnn94y0h35q","_id":"cltcs7hwg0007kjnnfzce6u4i"},{"post_id":"cltcs7hwg0008kjnn10yv6sqo","category_id":"cltcs7hwf0003kjnn94y0h35q","_id":"cltcs7hwi000dkjnn9nhzhkzx"},{"post_id":"cltcs7hwh0009kjnn6kwt62gm","category_id":"cltcs7hwf0003kjnn94y0h35q","_id":"cltcs7hwi000ekjnngudqal27"},{"post_id":"cltcs7hwh000bkjnn724a1bar","category_id":"cltcs7hwf0003kjnn94y0h35q","_id":"cltcs7hwi000ikjnn04ihf9wn"},{"post_id":"cltcs7hwh000ckjnnfhtnawo1","category_id":"cltcs7hwi000gkjnn1gwi0guw","_id":"cltcs7hwi000lkjnn1fpd63vi"},{"post_id":"cltcs7hwi000rkjnn24kcfldu","category_id":"cltcs7hwj000tkjnne71mbcpu","_id":"cltcs7hwj000ykjnnco2x3zvx"},{"post_id":"cltcs7hwj000skjnn9wf53xrf","category_id":"cltcs7hwj000vkjnn4inx5ar4","_id":"cltcs7hwj0010kjnnbw3u77r6"}],"PostTag":[{"post_id":"cltcs7hwd0001kjnn0bir3tgb","tag_id":"cltcs7hwf0004kjnn8ngd6zi7","_id":"cltcs7hwg0006kjnn6vscgky5"},{"post_id":"cltcs7hwg0008kjnn10yv6sqo","tag_id":"cltcs7hwh000akjnn14negunx","_id":"cltcs7hwi000hkjnn0aiafadj"},{"post_id":"cltcs7hwh0009kjnn6kwt62gm","tag_id":"cltcs7hwi000fkjnn2swr6zgz","_id":"cltcs7hwi000mkjnn9uuhez0p"},{"post_id":"cltcs7hwh0009kjnn6kwt62gm","tag_id":"cltcs7hwi000jkjnna8d3e1yu","_id":"cltcs7hwi000nkjnndmnq81w5"},{"post_id":"cltcs7hwh000bkjnn724a1bar","tag_id":"cltcs7hwi000kkjnnbfelbkr2","_id":"cltcs7hwi000pkjnn6rxwcbd1"},{"post_id":"cltcs7hwh000ckjnnfhtnawo1","tag_id":"cltcs7hwi000okjnnb2ag87w7","_id":"cltcs7hwi000qkjnn40ele3yj"},{"post_id":"cltcs7hwi000rkjnn24kcfldu","tag_id":"cltcs7hwj000ukjnneaqg0y26","_id":"cltcs7hwj000xkjnn8kms64z3"},{"post_id":"cltcs7hwj000skjnn9wf53xrf","tag_id":"cltcs7hwj000wkjnndpllgvjn","_id":"cltcs7hwj0011kjnn2v94gt1n"},{"post_id":"cltcs7hwj000skjnn9wf53xrf","tag_id":"cltcs7hwj000zkjnncvmn7cxx","_id":"cltcs7hwj0012kjnn0kwi3o34"}],"Tag":[{"name":"csrf","_id":"cltcs7hwf0004kjnn8ngd6zi7"},{"name":"身份验证","_id":"cltcs7hwh000akjnn14negunx"},{"name":"httponly","_id":"cltcs7hwi000fkjnn2swr6zgz"},{"name":"xss","_id":"cltcs7hwi000jkjnna8d3e1yu"},{"name":"跨域","_id":"cltcs7hwi000kkjnnbfelbkr2"},{"name":"以太坊","_id":"cltcs7hwi000okjnnb2ag87w7"},{"name":"redis","_id":"cltcs7hwj000ukjnneaqg0y26"},{"name":"hexo","_id":"cltcs7hwj000wkjnndpllgvjn"},{"name":"个人博客","_id":"cltcs7hwj000zkjnncvmn7cxx"}]}}